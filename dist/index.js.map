{
  "version": 3,
  "sources": ["../src/index.ts", "../src/action/logic/add-form-values-to-context.ts", "../src/action/logic/check-context-for-errors.ts", "../src/action/logic/handle-form-data.ts", "../src/action/logic/handle-list-item-form-structure-op.ts", "../src/action/logic/honeypot-field-has-value.ts", "../src/shared-logic.ts", "../src/action/logic/validate-form-field-value.ts", "../src/action/index.ts", "../src/loader/logic/check-for-relevant-context.ts", "../src/loader/logic/seed-context-with-initial-values.ts", "../src/loader/index.ts", "../src/form-wrapper.tsx", "../src/form-field.tsx", "../src/components/hidden.tsx", "../src/components/text-input.tsx", "../src/components/shared/display.tsx", "../src/components/shared/logic.tsx", "../src/components/radio.tsx", "../src/components/checkbox-group.tsx", "../src/components/expandable-list.tsx", "../src/components/stateful-radio.tsx", "../src/components/select.tsx", "../src/validation.ts"],
  "sourcesContent": ["export { formActionFunction } from \"./action\";\nexport { formLoaderFunction } from \"./loader\";\nexport { ElectricLadylandForm } from \"./form-wrapper\";\nexport type { FormFieldInput, FormStage, FormBlueprint } from \"./types\";\nexport { validation, validationPatterns } from \"./validation\";\nexport { stringValidator } from \"./validation\";\n", "import type { FormFieldInput, FormBlueprint } from \"../../types\";\n\n// Take the form values from the request\n// form data and add them to context\nexport function addFormValuesToContext({\n  formBlueprint,\n  body,\n  context,\n}: {\n  context: any;\n  formBlueprint: FormBlueprint;\n  body: FormData;\n}): any {\n  // Get the inputs from the form\n  function addFieldToContext(field: FormFieldInput) {\n    // Get the form field value\n    let formFieldValue: string | undefined;\n\n    if (\n      field.type === \"email\" ||\n      field.type === \"password\" ||\n      field.type === \"text\" ||\n      field.type === \"textarea\" ||\n      field.type === \"radio\" ||\n  field.type === \"select\" ||\n      field.type === \"hidden\" ||\n      field.type === \"stateful-radio\"\n    ) {\n      formFieldValue =\n        body.get(`${field.name}`)?.toString() ?? field.initialValue;\n    }\n\n    if (field.type === \"checkbox\") {\n      let checkboxValue = body.get(`${field.name}`)?.toString();\n      // If there is no value, the checkbox was never checked, so\n      // we want to return early\n      // console.log({ checkboxValue });\n\n      if (!checkboxValue) {\n        return;\n      }\n      formFieldValue = checkboxValue;\n    }\n\n    let errors: string[] = [];\n    // If a field is required and not present, we need to add an error\n    // to the field\n    if (\n      field.type === \"text\" ||\n      field.type === \"textarea\" ||\n      field.type === \"email\" ||\n      field.type === \"password\"\n    ) {\n      if (!formFieldValue && field.required) {\n        errors.push(\"This field is required\");\n      }\n    }\n\n    if (typeof field === \"object\") {\n      // console.log({ formFieldValue, fieldName: field.name });\n\n      // Add the field to context\n      if (formFieldValue) {\n        context[`${field.name}`] = {\n          value: formFieldValue,\n          errors,\n        };\n      }\n    }\n\n    // If it is a stateful radio field, check for\n    // dependent children\n    if (field.type === \"stateful-radio\") {\n      // Get the index of the selected value\n      // We need this to know which children to show\n\n      field.dependentChildren.forEach((fields) => {\n        if (typeof fields !== \"undefined\") {\n          fields.forEach((nestedField) => {\n            if (nestedField) {\n              addFieldToContext(nestedField);\n            }\n          });\n        }\n      });\n    }\n\n    if (field.type === \"checkbox-group\") {\n      field.checkboxes.forEach((checkbox) => {\n        // Get rid of checkbox values that might\n        // exist from a previous pass\n        delete context[`${checkbox.name}`];\n        // console.log({ contextAfterDelete: context });\n\n        addFieldToContext(checkbox);\n        //        console.log(\"hi neighbors\");\n      });\n    }\n  }\n\n  // Use the form structure to create a context object\n\n  // Get the current form step to know what to add to context\n  const currentFormStep = context.currentStep;\n\n  // console.log({ currentFormStep, formBlueprint, context });\n\n  // console.log(\"lol: \", typeof formBlueprint[currentFormStep]);\n\n  for (const field of formBlueprint[currentFormStep]?.fields) {\n    if (field) {\n      addFieldToContext(field);\n    }\n  }\n\n  // console.log({ context });\n}\n", "// Check for errors in context\n\nimport type { FormFieldInput, FormBlueprint } from \"../../types\";\n\n// for the current step\nexport function checkContextForErrors({\n  context,\n  formBlueprint,\n}: {\n  formBlueprint: FormBlueprint;\n  context: any;\n}): boolean {\n  let errorsPresent = false;\n  // Basic form\n\n  const currentFormStep = context.currentStep;\n\n  // Using the current form step, get the context fields to\n  // check for errors\n  // eslint-disable-next-line no-inner-declarations\n  // We only care about the context values in the current step\n  let fieldsToValidate: string[] = [];\n\n  for (const field of formBlueprint[currentFormStep]?.fields) {\n    // console.log({ field });\n\n    if (context)\n      addFieldNameToValidateToArray(field, fieldsToValidate, context);\n  }\n\n  // console.log({ fieldsToValidate });\n\n  for (const fieldToValidate of fieldsToValidate) {\n    if (context[`${fieldToValidate}`]?.errors?.length >= 1) {\n      errorsPresent = true;\n    }\n\n    if (errorsPresent) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction addFieldNameToValidateToArray(\n  field: FormFieldInput,\n  fieldsToValidate: string[],\n  context: any\n) {\n  fieldsToValidate.push(field.name);\n\n  if (field.type === \"stateful-radio\") {\n    let selectedIndex = field.options.indexOf(context[`${field.name}`].value);\n    field.dependentChildren[selectedIndex].forEach((nestedField) => {\n      if (nestedField) {\n        fieldsToValidate.push(nestedField.name);\n      }\n    });\n  }\n}\n", "// Takes in the data (context), success redirect path, and\n\n// session and commitSession function\nexport async function handleFormData({\n  handleDataFn,\n  context,\n  successRedirectPath,\n  session,\n  request,\n  formUtilitiesFromRemixApp,\n}: {\n  handleDataFn: any;\n  context: any;\n  successRedirectPath: string;\n  session: any;\n  request: Request;\n  formUtilitiesFromRemixApp: {\n    redirect: any;\n    json: any;\n    commitSession: any;\n  };\n}) {\n  const { commitSession, redirect, json } = formUtilitiesFromRemixApp;\n  // handle data - the data function should return a tuple\n  // the first item in the tuple will be a boolean to indicate\n  // whether the operation succeeded or failed\n\n  // The second item in the tuple is the success or error message\n  let handleDataResult: [boolean, string] = await handleDataFn(\n    context,\n    request\n  );\n  let [success, message] = handleDataResult;\n\n  if (success) {\n      // clear the context values so that the form fields are empty if \n      // the user goes back to the same form\n    context = {};\n    context.dataHandlerSuccessMessage = message;\n    context.dataHandlerErrorMessage = \"\";\n    session.set(\"context\", context);\n\n    return redirect(successRedirectPath, {\n      headers: {\n        \"Set-Cookie\": await commitSession(session),\n      },\n    });\n  } else {\n    context.dataHandlerSuccessMessage = \"\";\n    context.dataHandlerErrorMessage = message;\n    session.set(\"context\", context);\n\n    return json(\n      {},\n      {\n        headers: {\n          \"Set-Cookie\": await commitSession(session),\n        },\n      }\n    );\n  }\n}\n", "export async function handleListItemFormStructureOp({\n  operationType,\n  formBlueprint,\n  context,\n  session,\n  pathname,\n  redirect,\n  body,\n  commitSession,\n}: {\n  operationType: any;\n  formBlueprint: any;\n  context: any;\n  session: any;\n  pathname: string;\n  redirect: any;\n  body: any;\n  commitSession: any;\n}): Promise<any> {\n  let expandableList = formBlueprint[context?.currentStep]?.fields.find(\n    (item: any) => {\n      return item.type === \"expandable-list\";\n    }\n  );\n  let expandableListArr = context?.[expandableList.name]?.value ?? [];\n\n  if (operationType === \"add-item-to-list\") {\n    let listItemObject: any = {};\n\n    expandableList.listItemStructure.forEach((field: any) => {\n      listItemObject[field.name] = {\n        value: body.get(field.name),\n        errors: [],\n      };\n    });\n\n    expandableListArr.push(listItemObject);\n  } else if (operationType === \"edit-list-item\") {\n    let indexToChange = body.get(\"index-to-change\");\n    expandableList.listItemStructure.forEach((field: any) => {\n      expandableListArr[Number(indexToChange)][field.name] = {\n        value: body.get(field.name),\n        errors: [],\n      };\n    });\n  } else if (operationType === \"delete-list-item\") {\n    let indexToDelete = body.get(\"index-to-delete\");\n\n    expandableListArr.splice(Number(indexToDelete), 1);\n  }\n  session.set(\"context\", {\n    ...context,\n    [expandableList.name]: {\n      value: expandableListArr,\n      errors: [],\n    },\n  });\n\n  return redirect(pathname, {\n    headers: {\n      \"Set-Cookie\": await commitSession(session),\n    },\n  });\n}\n", "// A bot entered a value into a hidden field\nexport function honeypotFieldHasValue({ body }: { body: FormData }) {\n  let honeypotField = body.get(\"given-name\");\n\n  // console.log({ honeypotField });\n\n  if (honeypotField) {\n    return true;\n  }\n\n  return false;\n}\n", "import type { FormBlueprint } from \"./types\";\n\nexport function getFormStage({\n  context,\n  formBlueprint,\n}: {\n  context: any;\n  formBlueprint: FormBlueprint;\n}): \"beginning\" | \"middle\" | \"end\" {\n  // What stage of the form are we in\n  // Beginning - Middle - End\n  // If formBlueprint length is 1, we are a single step form\n  // and we are in the end stage\n  if (formBlueprint.length === 1) {\n    return \"end\";\n  }\n  const numberOfAvailableSteps = formBlueprint.length;\n  let formStage: \"beginning\" | \"middle\" | \"end\" =\n    context.currentStep === 0\n      ? \"beginning\"\n      : Number(context.currentStep) + 1 === numberOfAvailableSteps\n      ? \"end\"\n      : \"middle\";\n\n  return formStage;\n}\n\nexport function toBinary(string: string) {\n  const codeUnits = new Uint16Array(string.length);\n  for (let i = 0; i < codeUnits.length; i++) {\n    codeUnits[i] = string.charCodeAt(i);\n  }\n  const charCodes = new Uint8Array(codeUnits.buffer);\n  let result = \"\";\n  for (let i = 0; i < charCodes.byteLength; i++) {\n    result += String.fromCharCode(charCodes[i]);\n  }\n  return result;\n}\n\nexport function fromBinary(binary: string) {\n  const bytes = new Uint8Array(binary.length);\n  for (let i = 0; i < bytes.length; i++) {\n    bytes[i] = binary.charCodeAt(i);\n  }\n  const charCodes = new Uint16Array(bytes.buffer);\n  let result = \"\";\n  for (let i = 0; i < charCodes.length; i++) {\n    result += String.fromCharCode(charCodes[i]);\n  }\n  return result;\n}\n\nexport function convertSingleQuotes(string: string) {\n  let stringLength = string.length;\n  let result = \"\";\n\n  for (let i = 0; i < stringLength; i++) {\n    // look for single quotes\n    let stringChar = string.charCodeAt(i);\n\n    // console.log({ stringChar });\n\n    if (stringChar === 8216 || stringChar === 8217) {\n      // console.log(\"We've got a runner\");\n\n      result += \"'\";\n    } else {\n      result += string[i];\n    }\n  }\n\n  // console.log({ result });\n\n  return result;\n}\n", "import { convertSingleQuotes } from \"../../shared-logic\";\nimport type { FormFieldInput } from \"../../types\";\n\n// Validate a form field value (context)\n// using the validation patterns outlined in formField\n// If an error exists, add it to the context\n\n// errors array\nexport function validateFormFieldValue({\n  formField,\n  context,\n}: {\n  context: any;\n  formField: FormFieldInput;\n}) {\n  // currentStep and formStage are context properties\n  // that we don't want to validate, they are also not\n  // objects\n\n  // if (typeof formField !== \"object\") {\n  //   console.log(\"I'm out..\");\n\n  //   return;\n  // }\n  if (formField.type === \"hidden\") {\n    return;\n  }\n\n  if (\n    formField.type === \"text\" ||\n    formField.type === \"textarea\" ||\n    formField.type === \"email\" ||\n    formField.type === \"password\"\n  ) {\n    let currentFieldValue = context[`${formField.name}`].value;\n    // Iterate through the validation patterns\n    formField.validation.patterns.forEach((pattern, index) => {\n      const valueIsValid = validateFieldValue({\n        value: currentFieldValue,\n        regex: pattern,\n      });\n\n      // console.log(\"valueIsValid: \", valueIsValid);\n\n      // Value is not valid\n      // Push current error message onto array if it isn't already there\n      if (\n        !valueIsValid &&\n        !context[`${formField.name}`].errors.includes(\n          formField.validation.messages[index]\n        )\n      ) {\n        // console.log(\"add an error\");\n\n        context[`${formField.name}`].errors.push(\n          formField.validation.messages[index]\n        );\n      }\n    });\n  }\n\n  if (formField.type === \"stateful-radio\") {\n    let currentFieldValue = context[`${formField.name}`].value;\n    let { dependentChildren } = formField;\n    // Get currently selected radio option\n    // Get the index of the current value\n    const selectedValueIndex: number =\n      formField.options.indexOf(currentFieldValue);\n\n    if (typeof dependentChildren === \"object\") {\n      dependentChildren[selectedValueIndex].forEach((dependentField) => {\n        if (typeof dependentField !== \"undefined\") {\n          validateFormFieldValue({ context, formField: dependentField });\n        }\n      });\n    }\n  }\n}\n\nfunction validateFieldValue({\n  value,\n  regex,\n}: {\n  value: string;\n  regex: string;\n}) {\n  let regexTestPattern = new RegExp(`${regex}`, \"igm\");\n\n  value = convertSingleQuotes(value);\n\n  // console.log({ regexTestPattern });\n\n  // console.log(\"regexTest: \", regexTestPattern.test(value));\n\n  // console.log({ value });\n\n  return regexTestPattern.test(value);\n}\n", "import {\n  addFormValuesToContext,\n  checkContextForErrors,\n  handleFormData,\n  handleListItemFormStructureOp,\n  honeypotFieldHasValue,\n  validateFormFieldValue,\n} from \"./logic\";\nimport type { FormBlueprint } from \"../types\";\nimport { getFormStage } from \"../shared-logic\";\n\nexport async function formActionFunction({\n  request,\n  formBlueprint,\n  handleDataFn,\n  successRedirectPath,\n  formUtilitiesFromRemixApp,\n}: {\n  request: Request;\n  formBlueprint: FormBlueprint;\n  handleDataFn: any;\n  successRedirectPath: string;\n  formUtilitiesFromRemixApp: {\n    commitSession: any;\n    getSession: any;\n    destroySession: any;\n    redirect: any;\n    json: any;\n  };\n}): Promise<any> {\n  // Get the form utilities by spreading the form utilities object\n  const { commitSession, getSession, destroySession, redirect } =\n    formUtilitiesFromRemixApp;\n\n  let basicOrMultipart: \"basic\" | \"multipart\" = \"basic\";\n  formBlueprint.length > 1\n    ? (basicOrMultipart = \"multipart\")\n    : (basicOrMultipart = \"basic\");\n\n  // Get the current session\n  const session = await getSession(request.headers.get(\"Cookie\"));\n\n  //  console.log({ session });\n\n  let { pathname } = new URL(request.url);\n\n  let context: any = session.get(\"context\") ?? {};\n\n  //  console.log({ context });\n\n  // If there is no context, the session most likely timed out\n  // We only really care about the context if it is a multipart form\n  if (basicOrMultipart === \"multipart\" && Object.keys(context).length < 1) {\n    let { pathname } = new URL(request.url);\n    // console.log({ pathname });\n\n    //    console.log(\"No context found in session, redirecting to start\");\n    return redirect(pathname, {\n      headers: {\n        \"Set-Cookie\": await destroySession(session),\n      },\n    });\n  }\n\n  const body = await request.formData();\n\n  // Handle bots by checking for honeypot field\n  let honeypotFieldHit = honeypotFieldHasValue({ body });\n\n  if (honeypotFieldHit) {\n    return redirect(\"/\");\n  }\n\n  const operationType = body.get(\"operation-type\");\n\n  // *** ALERT ***\n  // operationType only exists for list item form structure\n  // Handle accordingly\n  if (operationType) {\n    return await handleListItemFormStructureOp({\n      operationType,\n      formBlueprint,\n      context,\n      session,\n      commitSession,\n      pathname,\n      body,\n      redirect,\n    });\n  }\n\n  let submitType: \"back\" | \"next\" | \"submit\" | string =\n    body.get(\"submit-type\")?.toString() ?? \"\";\n\n  // console.log({ submitType });\n\n  // Multipart - back button\n  if (basicOrMultipart === \"multipart\") {\n    if (submitType === \"back\") {\n      context.currentStep -= 1;\n\n      session.set(\"context\", context);\n\n      return redirect(pathname, {\n        headers: {\n          \"Set-Cookie\": await commitSession(session),\n        },\n      });\n    }\n  }\n\n  // Add the form values to context\n  await addFormValuesToContext({\n    formBlueprint,\n    body,\n    context,\n  });\n\n  // Validate the form inputs using the validation\n  // methods from the form structure\n  if (!formBlueprint[context.currentStep].fields) {\n    throw new Error(\"No fields found in formBlueprint\");\n  }\n\n  formBlueprint[0].fields.forEach((formField) => {\n    validateFormFieldValue({ context, formField });\n  });\n\n  let sessionData: any = {};\n\n  for (const contextItem in context) {\n    // console.log({ contextItem: context[contextItem] });\n\n    sessionData[contextItem] = context[contextItem].value;\n  }\n\n  // console.log({ sessionData });\n\n  session.set(\"context\", context);\n\n  // Check for errors in context\n  // In basic, we want to check all of the context entries\n  // In multipart, we only want to check the context items\n  // for the current step\n  let errorsInContext = checkContextForErrors({\n    context,\n    formBlueprint,\n  });\n\n  // console.log({ errorsInContext, context });\n\n  if (!errorsInContext) {\n    // Get the current form stage, if it is only a single step form\n    // the formStage will be set to end to show a submit button\n    const formStage = getFormStage({ formBlueprint, context });\n    context.formStage = formStage;\n    // If there are no errors in the context we have two routes\n    // to take\n\n    // Basic Form\n    // Multipart Form\n\n    // BASIC FORM\n    if (basicOrMultipart === \"basic\") {\n      return handleFormData({\n        request,\n        handleDataFn,\n        context,\n        successRedirectPath,\n        formUtilitiesFromRemixApp,\n        session,\n      });\n    }\n\n    // MULTIPART FORM\n\n    // Get the current form stage\n    // This will determine a couple things\n    // * What buttons we need to render on the form\n    // (Next, Back, Submit)\n    // * If we are at the end, we want to handle the data,\n    // otherwise we want to show the next step of the form\n\n    // Handle data\n    if (formStage === \"end\" && submitType === \"submit\") {\n      // console.log(\"hey guys\");\n\n      return handleFormData({\n        handleDataFn,\n        context,\n        successRedirectPath,\n        formUtilitiesFromRemixApp,\n        session,\n        request,\n      });\n    } else {\n      // Still at the beginning or middle of the form\n      // All the inputs were correct, we want to go to\n      // the next stage of the form\n      context.currentStep += 1;\n      //      console.log({ currentStep: context.currentStep });\n\n      session.set(\"context\", context);\n\n      return redirect(pathname, {\n        headers: {\n          \"Set-Cookie\": await commitSession(session),\n        },\n      });\n    }\n  }\n\n  return redirect(pathname, {\n    headers: {\n      \"Set-Cookie\": await commitSession(session),\n    },\n  });\n}\n", "import type { FormFieldInput, FormBlueprint } from \"../../types\";\n\n// Check to see that the context applies to the current\n// form structure. If it doesn't, return false\n\n// Perform different validation based on the field type\n// Outliers:\n// - Stateful Radio\n// - Checkbox Group\n\n// Does the context apply to the current form structure?\n// Yes - return the current context\n// No - return an empty context object\nfunction checkForRelevantContext({\n  formBlueprint,\n  context,\n}: {\n  formBlueprint: FormBlueprint;\n  context: any;\n}): any {\n  // No context exists\n  if (!context) {\n    return {};\n  }\n\n  let contextMismatch = false;\n\n  // Loop through the steps of the form structure and\n  // then loop through the fields of that step\n\n  // Each iteration of the loop will check the value of the\n  // contextMatches boolean. If contextMatches is false, we\n  // know we have a context mismatch and want to return an\n  // empty context object to re-initate the form\n\n  for (const step of formBlueprint) {\n    // @ts-ignore\n    for (const field of step?.fields) {\n      if (contextMismatch) {\n        return {};\n      }\n\n      contextMismatch = checkContextForMismatch({ field, context });\n    }\n    if (contextMismatch) {\n      //      console.log(\n      //       \"The context you passed in does not match the structure of the form. Setting context to an empty object so that we can start the form again\"\n      //    );\n\n      return {};\n    }\n  }\n\n  return context;\n}\n\nfunction checkContextForMismatch({\n  field,\n  context,\n}: {\n  field: FormFieldInput;\n  context: any;\n}) {\n  // Checkbox groups should be ignored, because their value\n  // may or may not exist. A selected checkbox will show up\n  // in a form post, an unselected checkbox will not\n  if (field.type === \"checkbox-group\") {\n    return false;\n  }\n\n  let contextFieldName = context[`${field.name}`];\n  // If the context field name is not defined, we know we're on the wrong form\n  if (typeof contextFieldName === \"undefined\") {\n    return true;\n  }\n  if (\n    typeof contextFieldName?.value !== \"string\" &&\n    typeof contextFieldName?.value !== \"object\"\n  ) {\n    //    console.log(\"bad value: \", contextFieldName.value);\n\n    return true;\n  }\n\n  // Stateful radios are also special in that in addition to\n  // their value, they can have nested children\n  if (field.type === \"stateful-radio\") {\n    field.dependentChildren.forEach((fields) => {\n      fields.forEach((nestedField) => {\n        if (nestedField) {\n          checkContextForMismatch({ field: nestedField, context });\n        }\n      });\n    });\n  }\n\n  if (field.type === \"expandable-list\") {\n    field.listItemStructure.forEach((nestedField) => {\n      if (nestedField) {\n        checkContextForMismatch({ field: nestedField, context });\n      }\n    });\n  }\n\n  return false;\n}\n\nexport { checkForRelevantContext };\n", "import type { FormFieldInput, FormBlueprint } from \"../../types\";\n\nfunction seedContextWithInitialValues({\n  formBlueprint,\n}: {\n  formBlueprint: FormBlueprint;\n}): any {\n  // Give the context object initial values\n  let context: any = {};\n\n  for (const step of formBlueprint) {\n    // console.log({ step });\n\n    // @ts-ignore\n    for (const field of step?.fields) {\n      // console.log({ field });\n\n      if (field) {\n        addFieldToContext({ field, context });\n      }\n    }\n  }\n\n  context.currentStep = 0;\n\n  return context;\n}\n\nfunction addFieldToContext({\n  field,\n  context,\n}: {\n  field: FormFieldInput;\n  context: any;\n}) {\n  if (field.type !== \"checkbox-group\" && field.type !== \"expandable-list\") {\n    context[`${field.name}`] = {\n      value: field.initialValue || \"\",\n      errors: [],\n    };\n  } else if (field.type === \"checkbox-group\") {\n    field.checkboxes.forEach((checkbox) => {\n      if (checkbox.initialValue) {\n        context[`${checkbox.name}`] = {\n          value: checkbox.initialValue || \"\",\n          errors: [],\n        };\n      }\n    });\n  } else if (field.type === \"expandable-list\") {\n    context[`${field.name}`] = {\n      value: field.initialValue || [],\n      errors: [],\n    };\n  }\n\n  // console.log(\"adding field context: \", context);\n\n  if (field.type === \"stateful-radio\") {\n    field.dependentChildren.forEach((fields) => {\n      fields.forEach((nestedField) => {\n        if (typeof nestedField !== \"undefined\") {\n          addFieldToContext({ field: nestedField, context });\n        }\n      });\n    });\n  }\n}\n\nexport { seedContextWithInitialValues };\n", "import type { FormBlueprint } from \"../types\";\nimport { checkForRelevantContext, seedContextWithInitialValues } from \"./logic\";\n\nimport { getFormStage } from \"../shared-logic\";\nexport async function formLoaderFunction({\n  request,\n  formBlueprint,\n  formUtilitiesFromRemixApp,\n}: {\n  request: Request;\n  formBlueprint: FormBlueprint;\n  formUtilitiesFromRemixApp: {\n    commitSession: any;\n    getSession: any;\n    destroySession: any;\n    json: any;\n  };\n}): Promise<any> {\n  // Get the form utilities by spreading the form utilities object\n  const { commitSession, getSession, destroySession, json } =\n    formUtilitiesFromRemixApp;\n\n  const session = await getSession(request.headers.get(\"Cookie\"));\n\n  let context = session.get(\"context\");\n\n  // Check to see if the current context matches the current\n  // form structure. If it doesn't match, there is a good chance\n  // that there is no context or we are coming from a different form\n  context = checkForRelevantContext({\n    formBlueprint,\n    context,\n  });\n\n  // If the context object doesn't have any length, we\n  // know that it is empty and we need to seed it\n  if (Object.keys(context).length < 1) {\n    //    console.log(\"Empty context object, seeding with initial values\");\n    context = seedContextWithInitialValues({\n      formBlueprint,\n    });\n  }\n\n  // Get the current step\n  context.currentStep = context?.currentStep ?? 0;\n\n  // We should never have a negative number\n  // for the current step\n  if (context.currentStep < 0) {\n    context.currentStep = 0;\n  }\n\n  let formStage = getFormStage({ context, formBlueprint });\n\n  // console.log({ formStage, context });\n\n  // This is mostly for multi-step forms, if we don't have any context\n  // values but we are past step one, we know we have some kind of mismatch\n  if (context.currentStep > 0 && Object.keys(context).length < 1) {\n    //      console.log(\"You shouldn't be here\");\n\n    return json(\n      {},\n      {\n        headers: {\n          \"Set-Cookie\": await destroySession(session),\n        },\n      }\n    );\n  }\n\n  context.formStage = formStage;\n  // @ts-ignore\n  context.nextButtonText = formBlueprint[context.currentStep]?.nextButtonText;\n  // @ts-ignore\n  context.backButtonText = formBlueprint[context.currentStep]?.backButtonText;\n\n  session.set(\"context\", context);\n\n  // console.log({ currentStep: context?.currentStep });\n  return {\n    context,\n    formStructure: formBlueprint[context.currentStep],\n    commitSession,\n    session,\n  };\n}\n", "import type { ReactNode } from \"react\";\nimport type { FormFieldInput, FormStage } from \"./types\";\n// @ts-expect-error sometimes you walk the line, sometimes it walks you\nimport React from \"react\";\nimport { FormField } from \"./form-field\";\nimport { FaChevronLeft, FaChevronRight } from \"react-icons/fa\";\n\nexport function ElectricLadylandForm({\n  context,\n  formStructure,\n  action,\n  submitText = \"Submit\",\n  reloadDocument = false,\n  remixBrowserUtils,\n}: {\n  context: any;\n  formStructure: FormStage;\n  action?: string;\n  submitText?: string;\n  reloadDocument?: boolean;\n  remixBrowserUtils: {\n    useSubmit: any;\n    Form: any;\n    useState: any;\n    useEffect: any;\n  };\n}) {\n  //  console.log({ formStructure });\n\n  return (\n    <div className=\"el-form-wrapper\">\n      <FormWrapper\n        RemixFormFromApplication={remixBrowserUtils?.Form}\n        reloadDocument={reloadDocument}\n        action={action}\n      >\n        {formStructure?.stageTitle && (\n          <div className=\"el-form-stage-title\">{formStructure.stageTitle}</div>\n        )}\n        <HoneypotField />\n        {formStructure.fields.map((field: FormFieldInput) => {\n          return (\n            <FormField\n              remixBrowserUtils={remixBrowserUtils}\n              field={field}\n              context={context}\n              key={field.name}\n            />\n          );\n        })}\n        {context.dataHandlerErrorMessage && context.formStage === \"end\" ? (\n          <>\n            <div className=\"font-display text-lg font-semibold text-danger-5\">\n              {context.dataHandlerErrorMessage}\n            </div>\n            <span className=\"block h-6\"></span>\n          </>\n        ) : null}\n        <div className=\"forward-button-wrapper mt-10 flex w-full\">\n          {(context.formStage === \"beginning\" ||\n            context.formStage === \"middle\") && (\n            <FormButton\n              dataTest=\"next\"\n              className=\"el-form-button-forward\"\n              name=\"submit-type\"\n              type=\"submit\"\n              value=\"next\"\n            >\n              {context.nextButtonText}\n              <span className=\"el-form-right-icon\">\n                <FaChevronRight aria-hidden=\"true\" />\n              </span>\n            </FormButton>\n          )}\n          {context.formStage === \"end\" && (\n            <FormButton\n              dataTest=\"submit\"\n              className=\"el-form-button-forward\"\n              name=\"submit-type\"\n              type=\"submit\"\n              value=\"submit\"\n            >\n              {submitText}\n              <span className=\"el-form-right-icon\">\n                <FaChevronRight aria-hidden=\"true\" />\n              </span>\n            </FormButton>\n          )}\n        </div>\n      </FormWrapper>\n      {(context.formStage === \"middle\" || context.formStage === \"end\") &&\n      context.currentStep > 0 ? (\n        <FormWrapper RemixFormFromApplication={remixBrowserUtils?.Form}>\n          <FormButton\n            dataTest=\"back\"\n            className=\"el-form-button-back\"\n            name=\"submit-type\"\n            type=\"submit\"\n            value=\"back\"\n          >\n            <span className=\"el-form-left-icon\">\n              <FaChevronLeft aria-hidden=\"true\" />\n            </span>\n            {context.backButtonText}\n          </FormButton>\n        </FormWrapper>\n      ) : null}\n    </div>\n  );\n}\n\nfunction FormWrapper({\n  children,\n  action,\n  reloadDocument = false,\n  RemixFormFromApplication,\n}: {\n  children: ReactNode;\n  action?: string;\n  reloadDocument?: boolean;\n  RemixFormFromApplication?: any;\n}) {\n  if (!RemixFormFromApplication) {\n    return (\n      <form className=\"el-form-element\" method=\"post\" action={action}>\n        {children}\n      </form>\n    );\n  }\n  if (reloadDocument) {\n    return (\n      <RemixFormFromApplication reloadDocument action={action} method=\"post\">\n        <div className=\"el-form-element\">{children}</div>\n      </RemixFormFromApplication>\n    );\n  }\n  return (\n    <RemixFormFromApplication action={action} method=\"post\">\n      <div className=\"el-form-element\">{children}</div>\n    </RemixFormFromApplication>\n  );\n}\n\nfunction HoneypotField() {\n  return (\n    <>\n      <input\n        className=\"visually-hidden\"\n        type=\"text\"\n        name=\"given-name\"\n        id=\"given-name\"\n      />\n      <label className=\"visually-hidden\" htmlFor=\"given-name\">\n        Given Name\n      </label>\n    </>\n  );\n}\n\nfunction FormButton({\n  children,\n  name,\n  className,\n  value,\n  type = \"submit\",\n  dataTest,\n}: {\n  children: ReactNode;\n  name?: string;\n  className?: string;\n  value?: string;\n  type?: \"submit\";\n  dataTest?: string;\n}) {\n  return (\n    <button\n      data-test={dataTest}\n      className={`el-form-button${className ? \" \" + className : \"\"}`}\n      name={name}\n      type={type}\n      value={value}\n    >\n      {children}\n    </button>\n  );\n}\n", "import type { FormFieldInput } from \"./types\";\n// @ts-ignore sometimes you walk the line, sometimes it walks you\nimport React from \"react\";\nimport { HiddenField } from \"./components/hidden\";\nimport { TextInput } from \"./components/text-input\";\nimport { Radio } from \"./components/radio\";\nimport { CheckboxGroup } from \"./components/checkbox-group\";\nimport { ExpandableList } from \"./components/expandable-list\";\nimport { StatefulRadio } from \"./components/stateful-radio\";\nimport { Select } from \"./components/select\";\n\nfunction FormField({\n  field,\n  context,\n  remixBrowserUtils,\n}: {\n  field: FormFieldInput;\n  context: any;\n  remixBrowserUtils?: {\n    useSubmit: any;\n    Form: any;\n    useState: any;\n    useEffect: any;\n  };\n}) {\n  //    console.log({remixBrowserUtils});\n  if (field.type === \"hidden\") {\n    return (\n      <HiddenField fieldContext={context[field.name]} fieldBlueprint={field} />\n    );\n  }\n\n  if (\n    field.type === \"text\" ||\n    field.type === \"textarea\" ||\n    field.type === \"password\" ||\n    field.type === \"email\"\n  ) {\n    return (\n      <div\n        className=\"el-field-item\"\n        data-tb-width={field.tbWidth}\n        data-lt-width={field.ltWidth}\n      >\n        <TextInput\n          remixBrowserUtils={remixBrowserUtils}\n          fieldBlueprint={field}\n          fieldContext={context[field.name]}\n        />\n      </div>\n    );\n  }\n\n  if (field.type === \"radio\") {\n    return (\n      <div\n        className=\"el-field-item\"\n        data-tb-width={field.tbWidth}\n        data-lt-width={field.ltWidth}\n      >\n        <Radio fieldBlueprint={field} fieldContext={context[field.name]} />\n      </div>\n    );\n  }\n\n  if (field.type === \"select\") {\n    return (\n      <div\n        className=\"el-field-item\"\n        data-tb-width={field.tbWidth}\n        data-lt-width={field.ltWidth}\n      >\n        <Select\n          remixBrowserUtils={remixBrowserUtils}\n          fieldBlueprint={field}\n          fieldContext={context[field.name]}\n        />\n      </div>\n    );\n  }\n\n  if (field.type === \"checkbox-group\") {\n    return (\n      <div\n        className=\"el-field-item\"\n        data-tb-width={field.tbWidth}\n        data-lt-width={field.ltWidth}\n      >\n        <CheckboxGroup fieldBlueprint={field} context={context} />\n      </div>\n    );\n  }\n\n  if (field.type === \"expandable-list\") {\n    return (\n      <div className=\"el-field-item\">\n        <ExpandableList\n          remixBrowserUtils={remixBrowserUtils}\n          fieldBlueprint={field}\n          fieldContext={context[field.name]}\n        />\n      </div>\n    );\n  }\n\n  if (field.type === \"stateful-radio\") {\n    return (\n      <StatefulRadio\n        remixBrowserUtils={remixBrowserUtils}\n        fieldBlueprint={field}\n        context={context}\n      />\n    );\n  }\n  return null;\n}\n\nexport { FormField };\n", "// @ts-ignore react for reactaceans\nimport React from \"react\";\n\n// Create a component that renders a hidden input\nexport function HiddenField({\n  fieldContext,\n  fieldBlueprint,\n}: {\n  fieldContext: {\n    value?: string;\n  };\n  fieldBlueprint: {\n    initialValue?: string;\n    name: string;\n  };\n}) {\n  let initialValue = fieldBlueprint.initialValue ?? \"\";\n  let value = fieldContext?.value ?? initialValue;\n  return <input type=\"hidden\" name={fieldBlueprint.name} value={value} />;\n}\n", "// @ts-ignore sometimes you walk the line, sometimes it walks you\nimport React from \"react\";\nimport { displayFieldLabelDescriptionError } from \"./shared/display\";\nimport type { TextFieldBlueprint } from \"../types\";\nimport { onChange, useFormField } from \"./shared/logic\";\n\nexport function TextInput({\n  fieldBlueprint,\n  fieldContext,\n  className,\n  remixBrowserUtils,\n}: {\n  fieldContext: { value?: string; errors: string[] };\n  fieldBlueprint: TextFieldBlueprint;\n  className?: string;\n  remixBrowserUtils: {\n    useState: any;\n    useEffect: any;\n  };\n}) {\n  let {\n    defaultValue,\n    fieldErrors,\n    setFieldErrors,\n    fieldVisited,\n    setFieldVisited,\n  } = useFormField({ fieldBlueprint, fieldContext, remixBrowserUtils });\n  //  console.log({ validation: fieldBlueprint.validation});\n  //  console.log({ fieldErrors, fieldVisited });\n  return (\n    <>\n      {displayFieldLabelDescriptionError({\n        fieldBlueprint,\n        fieldErrors,\n        fieldVisited,\n      })}\n      {fieldBlueprint.type === \"text\" ||\n      fieldBlueprint.type === \"password\" ||\n      fieldBlueprint.type === \"email\" ? (\n        <input\n          data-test={fieldBlueprint.name}\n          name={fieldBlueprint.name}\n          id={fieldBlueprint.name}\n          className={`el-text-input${className ? \" \" + className : \"\"}`}\n          required={fieldBlueprint.required}\n          defaultValue={defaultValue}\n          placeholder={fieldBlueprint.placeholder}\n          onBlur={() => setFieldVisited(true)}\n          onChange={(event) => {\n            onChange({\n              e: event,\n              setFieldErrors,\n              fieldErrors,\n              fieldValidation: fieldBlueprint.validation,\n            });\n          }}\n          pattern={fieldBlueprint.validation.browserPattern}\n          title={fieldBlueprint.validation.browserMessage}\n          type={fieldBlueprint.type}\n          autoCorrect=\"false\"\n          autoComplete=\"false\"\n        />\n      ) : fieldBlueprint.type === \"textarea\" ? (\n        <textarea\n          name={fieldBlueprint.name}\n          id={fieldBlueprint.name}\n          data-test={fieldBlueprint.name}\n          className=\"el-text-input\"\n          required={fieldBlueprint.required}\n          rows={5}\n          defaultValue={defaultValue}\n          placeholder={fieldBlueprint.placeholder}\n          onBlur={() => setFieldVisited(true)}\n          onChange={(event) => {\n            onChange({\n              e: event,\n              setFieldErrors,\n              fieldErrors,\n              fieldValidation: fieldBlueprint.validation,\n            });\n          }}\n        />\n      ) : null}\n    </>\n  );\n}\n", "import type { ReactNode } from \"react\";\n// @ts-ignore sometimes you walk the line, sometimes it walks you\nimport React from \"react\";\nimport type {\n  CheckboxGroupBlueprint,\n  ExpandableListBlueprint,\n  RadioFieldBlueprint,\n  SelectFieldBlueprint,\n  StatefulRadioFieldBlueprint,\n  TextFieldBlueprint,\n} from \"../../types\";\n\nexport function FieldLabel({\n  className,\n  children,\n}: {\n  className?: string;\n  children: ReactNode;\n}) {\n  return (\n    <>\n      <span\n        className={`el-form-field-label${className ? \" \" + className : \"\"}`}\n      >\n        {children}\n      </span>\n    </>\n  );\n}\n\nexport function FieldDescription({ children }: { children: ReactNode }) {\n  if (children) {\n    return <p className=\"el-form-field-description\">{children}</p>;\n  }\n\n  return null;\n}\n\nexport function displayFieldErrors({\n  fieldErrors,\n  fieldVisited,\n}: {\n  fieldErrors: string[];\n  fieldVisited: boolean;\n}) {\n  return (\n    <>\n      {fieldErrors.length >= 1 && fieldVisited\n        ? fieldErrors.map((fieldError) => {\n            //            console.log({ fieldError });\n\n            if (fieldErrors.length === 1) {\n              return (\n                <div className=\"el-field-error-text\" key={fieldError}>\n                  {fieldError}\n                </div>\n              );\n            } else {\n              return (\n                <div className=\"el-field-error-text\" key={fieldError}>\n                  - {fieldError}\n                </div>\n              );\n            }\n          })\n        : null}\n    </>\n  );\n}\n\nexport function displayFieldLabelDescriptionError({\n  fieldBlueprint,\n  fieldErrors,\n  fieldVisited,\n}: {\n  fieldBlueprint:\n    | TextFieldBlueprint\n    | SelectFieldBlueprint\n    | RadioFieldBlueprint\n    | StatefulRadioFieldBlueprint\n    | CheckboxGroupBlueprint\n    | ExpandableListBlueprint;\n  fieldErrors?: string[];\n  fieldVisited?: boolean;\n}) {\n  // fieldErrors = [\"Something Very Bad Happened\", \"Another Bad Thing\"];\n  // fieldVisited = true;\n  // console.log({fieldErrorsInsideDisplayFieldLabelDescriptionError: fieldErrors});\n  return (\n    <>\n      <label htmlFor={fieldBlueprint.name} key={fieldBlueprint.name}>\n        <FieldLabel>{fieldBlueprint.label}</FieldLabel>\n      </label>\n\n      <FieldDescription>{fieldBlueprint.description}</FieldDescription>\n\n      {fieldErrors && fieldVisited\n        ? displayFieldErrors({ fieldErrors, fieldVisited })\n        : null}\n    </>\n  );\n}\n\nexport function RadioOrCheckboxWrapper({\n  className,\n  children,\n}: {\n  className?: string;\n  children: ReactNode;\n}) {\n  // console.log({ className });\n\n  return (\n    <>\n      <div\n        className={`el-radio-or-checkbox-wrapper${\n          className ? \" \" + className : \"\"\n        }`}\n      >\n        {children}\n      </div>\n    </>\n  );\n}\n\nexport function RadioOrCheckboxLabel({\n  className,\n  children,\n  htmlFor,\n}: {\n  className?: string;\n  children: ReactNode;\n  htmlFor: string;\n}) {\n  return (\n    <label\n      htmlFor={htmlFor}\n      className={`el-radio-or-checkbox-label${\n        className ? \" \" + className : \"\"\n      }`}\n    >\n      {children}\n    </label>\n  );\n}\n", "import type { FormEvent } from \"react\";\nimport { convertSingleQuotes } from \"../../shared-logic\";\n\nexport function createFieldLabel(fieldName: string) {\n  let words = fieldName.split(\"-\");\n\n  for (let i = 0; i < words.length; i++) {\n    words[i] = words[i][0].toUpperCase() + words[i].slice(1);\n  }\n\n  return words.join(\" \");\n}\n\nexport function onChange({\n  e,\n  fieldValidation,\n  setFieldErrors,\n  fieldErrors,\n}: {\n  e: FormEvent<HTMLInputElement> | FormEvent<HTMLTextAreaElement>;\n  setFieldErrors: any;\n  fieldErrors: string[];\n  fieldValidation: { patterns: string[]; messages: string[] };\n}) {\n  //  console.log(\"hello from onChange\");\n  //    console.log({ validation: fieldValidation, fieldErrors });\n  let fieldIsValid = true;\n  fieldValidation.patterns.forEach(async (pattern, index) => {\n    let regexTestPattern = new RegExp(pattern, \"gim\");\n\n    let value = convertSingleQuotes(e?.currentTarget?.value);\n    // console.log({ value });\n    let currentFieldIsValid = regexTestPattern.test(value);\n    if (!currentFieldIsValid) fieldIsValid = false;\n    if (currentFieldIsValid) {\n      // remove the current error message if it exists\n      let indexOfError = fieldErrors.indexOf(fieldValidation.messages[index]);\n      // console.log({currentFieldMessage: fieldValidation.messages[index]});\n      // console.log(\"indexOfError\", indexOfError);\n      if (indexOfError > -1) {\n        fieldErrors.splice(indexOfError, 1);\n      }\n    } else if (!fieldErrors.includes(fieldValidation.messages[index])) {\n      // console.log(\"not valid\");\n\n      // Only display the error message once\n      setFieldErrors([...fieldErrors, fieldValidation.messages[index]]);\n    }\n  });\n  if (fieldIsValid) {\n    setFieldErrors([]);\n  }\n}\n\nexport function useFormField({\n  fieldBlueprint,\n  fieldContext,\n  remixBrowserUtils,\n}: {\n  fieldBlueprint: {\n    name: string;\n    type: string;\n    initialValue?: string;\n  };\n  fieldContext: {\n    value?: string;\n    errors: string[];\n  };\n  remixBrowserUtils: {\n    useState: any;\n    useEffect: any;\n  };\n}) {\n  let { useState } = remixBrowserUtils;\n  // Determine if the field has errors or has been visited\n  let errors: string[] = [];\n  let visited = false;\n\n  if (\n    fieldBlueprint.type === \"email\" ||\n    fieldBlueprint.type === \"password\" ||\n    fieldBlueprint.type === \"text\" ||\n    fieldBlueprint.type === \"textarea\"\n  ) {\n    if (fieldContext?.errors) {\n      errors = fieldContext?.errors;\n\n      if (fieldContext?.errors.length >= 1) visited = true;\n    }\n  }\n\n  let [fieldErrors, setFieldErrors] = useState(errors);\n  let [fieldVisited, setFieldVisited] = useState(visited);\n\n  // Check to see whether a value for the field exists in the context\n  // If it does, set the value to the context value\n  // If it doesn't, set the value to the initial value\n  let initialValue = fieldBlueprint.initialValue ?? \"\";\n  let defaultValue = fieldContext?.value ?? initialValue;\n\n  return {\n    fieldErrors,\n    fieldVisited,\n    setFieldErrors,\n    setFieldVisited,\n    defaultValue,\n  };\n}\n", "import type { RadioFieldBlueprint } from \"../types\";\nimport {\n  displayFieldLabelDescriptionError,\n  RadioOrCheckboxLabel,\n  RadioOrCheckboxWrapper,\n} from \"./shared/display\";\nimport { createFieldLabel } from \"./shared/logic\";\n\nexport function Radio({\n  fieldBlueprint,\n  fieldContext,\n}: {\n  fieldContext: { value?: string; errors: string[] };\n  fieldBlueprint: RadioFieldBlueprint;\n  className?: string;\n}) {\n  return (\n    <>\n      {displayFieldLabelDescriptionError({\n        fieldBlueprint,\n      })}\n\n      {fieldBlueprint.options.map((radioValue) => {\n        //        console.log({ radioValue });\n\n        let defaultRadioValue = fieldBlueprint.initialValue;\n\n        if (fieldContext?.value) {\n          defaultRadioValue = fieldContext.value;\n        }\n\n        const label = createFieldLabel(radioValue);\n        return (\n          <RadioOrCheckboxWrapper key={`${fieldBlueprint.name}-${radioValue}`}>\n            <input\n              data-test={`${fieldBlueprint.name}-${radioValue}`}\n              key={radioValue}\n              type=\"radio\"\n              id={`${fieldBlueprint.name}-${radioValue}`}\n              name={fieldBlueprint.name}\n              value={radioValue}\n              autoComplete=\"off\"\n              defaultChecked={radioValue === defaultRadioValue}\n            />\n            <RadioOrCheckboxLabel\n              className=\"ml-2\n              \"\n              htmlFor={`${fieldBlueprint.name}-${radioValue}`}\n            >\n              {label}\n            </RadioOrCheckboxLabel>\n          </RadioOrCheckboxWrapper>\n        );\n      })}\n    </>\n  );\n}\n", "import type { CheckboxGroupBlueprint } from \"../types\";\nimport {\n  displayFieldLabelDescriptionError,\n  RadioOrCheckboxLabel,\n  RadioOrCheckboxWrapper,\n} from \"./shared/display\";\n\n// Because we are dealing with checkboxes, we want all of the\n// context items.\n\n// To determine if a checkbox is checked, we need to look\n// at the context to see if the field exists there. If it does,\n// we know that the checkbox is checked.\nexport function CheckboxGroup({\n  fieldBlueprint,\n  context,\n}: {\n  context: any;\n  fieldBlueprint: CheckboxGroupBlueprint;\n  className?: string;\n}) {\n  return (\n    <>\n      {displayFieldLabelDescriptionError({\n        fieldBlueprint,\n      })}\n\n      {fieldBlueprint.checkboxes.map((checkbox) => {\n        return (\n          <RadioOrCheckboxWrapper key={checkbox.name}>\n            <input\n              data-test={`${checkbox.name}-${checkbox.value}`}\n              key={checkbox.name}\n              type=\"checkbox\"\n              id={checkbox.name}\n              name={checkbox.name}\n              value={checkbox.value}\n              autoComplete=\"off\"\n              defaultChecked={context?.[checkbox.name]}\n            />\n            <RadioOrCheckboxLabel\n              className=\"ml-2\n              \"\n              htmlFor={checkbox.name}\n            >\n              {checkbox.label}\n            </RadioOrCheckboxLabel>\n          </RadioOrCheckboxWrapper>\n        );\n      })}\n    </>\n  );\n}\n", "import type { ExpandableListBlueprint } from \"../types\";\n// @ts-ignore sometimes you walk the line, sometimes it walks you\nimport React from \"react\";\nimport { DialogOverlay, DialogContent } from \"@reach/dialog\";\nimport { FiPlusCircle } from \"react-icons/fi\";\nimport { FormField } from \"../form-field\";\nimport { displayFieldLabelDescriptionError } from \"./shared/display\";\nimport { IoClose } from \"react-icons/io5\";\n\nexport function ExpandableList({\n  fieldBlueprint,\n  fieldContext,\n  remixBrowserUtils,\n}: {\n  fieldBlueprint: ExpandableListBlueprint;\n  fieldContext: {\n    value: string[];\n    errors: string[];\n  };\n  remixBrowserUtils?: {\n    useSubmit: any;\n    Form: any;\n    useState: any;\n    useEffect: any;\n  };\n}) {\n  let { useState, useEffect } = remixBrowserUtils;\n  const submit = remixBrowserUtils.useSubmit();\n  const [showDialog, setShowDialog] = useState(false);\n  const [selectedIndex, setSelectedIndex] = useState(undefined);\n  const [selectedAction, setSelectedAction] = useState(\"\");\n  const [listItems, setListItems] = useState([]);\n  const open = () => setShowDialog(true);\n  const close = () => setShowDialog(false);\n\n  useEffect(() => {\n    //   console.log(\"context changed\");\n\n    setListItems(fieldContext?.value);\n    //    console.log({ listItems });\n  }, [fieldContext, listItems]);\n\n  let { listItemStructure } = fieldBlueprint;\n\n  let fieldsToShowInTable = {};\n  listItemStructure.forEach((field) => {\n    // @ts-expect-error lolz typescript\n    if (field.showOnMobileTable) {\n      fieldsToShowInTable[field.name] = field;\n    }\n  });\n\n  return (\n    <div className=\"el-field-item\">\n      {displayFieldLabelDescriptionError({\n        fieldBlueprint,\n      })}\n\n      <button\n        className=\"expand-click-target el-form-button el-form-add-item-button\"\n        onClick={(e) => {\n          e.preventDefault();\n          setSelectedIndex(undefined);\n          setSelectedAction(\"\");\n          open();\n        }}\n      >\n        <span className=\"el-form-left-icon\">\n          <FiPlusCircle />\n        </span>\n        {fieldBlueprint.addItemLabel}\n      </button>\n\n      {listItems?.length > 0 && (\n        <>\n          <div className=\"list-items-table-wrapper\">\n            <table>\n              <thead>\n                <tr className=\"lit-row\">\n                  {listItemStructure.map((nestedField) => {\n                    if (\n                      Object.keys(fieldsToShowInTable).includes(\n                        nestedField.name\n                      )\n                    ) {\n                      return (\n                        <th\n                          className=\"lit-cell\"\n                          data-flex={\n                            // @ts-expect-error lolz typescript\n                            nestedField.tableFlex\n                          }\n                          data-align-text={\n                            // @ts-expect-error lolz typescript\n                            nestedField.alignText\n                          }\n                          key={nestedField.name}\n                        >\n                          {nestedField.label}\n                        </th>\n                      );\n                    } else {\n                      return null;\n                    }\n                  })}\n                  <th className=\"lit-cell\" data-flex={3}>\n                    &nbsp;\n                  </th>\n                  <th className=\"lit-cell\" data-flex={3}>\n                    &nbsp;\n                  </th>\n                </tr>\n              </thead>\n\n              <tbody>\n                {listItems.map((item: any, index: number) => {\n                  // console.log({ item });\n                  return (\n                    <tr className=\"lit-row\" key={index}>\n                      {Object.keys(fieldsToShowInTable).map(\n                        (fieldToShow, index) => {\n                          //                         console.log({ index });\n\n                          let cellFlexValue;\n\n                          let alignTextValue;\n\n                          listItemStructure.forEach((itemStructure: any) => {\n                            if (itemStructure.name === fieldToShow) {\n                              cellFlexValue = itemStructure.tableFlex;\n                              alignTextValue = itemStructure.alignText;\n                            }\n                          });\n\n                          // flexValueArray.filter((item) => {\n                          //   if (item !== undefined && typeof item === \"number\") {\n                          //     return item;\n                          //   }\n                          // });\n\n                          //                        console.log({ cellFlexValue });\n\n                          return (\n                            <th\n                              className=\"lit-cell\"\n                              data-flex={cellFlexValue}\n                              data-align-text={alignTextValue}\n                              key={`${item[fieldToShow]}-${index}`}\n                            >\n                              {item[fieldToShow]?.value}\n                            </th>\n                          );\n                        }\n                      )}\n                      <th\n                        className=\"lit-cell\"\n                        data-align-text=\"right\"\n                        data-flex={3}\n                      >\n                        <button\n                          className=\"edit-item-button expand-click-target\"\n                          data-test={`edit-${index}`}\n                          onClick={(e) => {\n                            e.preventDefault();\n                            setSelectedIndex(index);\n                            setSelectedAction(\"edit-item\");\n\n                            open();\n                          }}\n                        >\n                          Edit\n                        </button>\n                      </th>\n                      <th\n                        className=\"lit-cell\"\n                        data-align-text=\"right\"\n                        data-flex={3}\n                      >\n                        <button\n                          className=\"delete-item-button expand-click-target\"\n                          data-test={`delete-${index}`}\n                          onClick={(e) => {\n                            e.preventDefault();\n                            setSelectedIndex(index);\n                            setSelectedAction(\"delete-item\");\n\n                            open();\n                          }}\n                        >\n                          Delete\n                        </button>\n                      </th>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        </>\n      )}\n      <DialogOverlay\n        className=\"expandable-list-modal-wrapper\"\n        isOpen={showDialog}\n        onDismiss={close}\n      >\n        <DialogContent\n          className=\"expandable-list-modal-content\"\n          aria-label={fieldBlueprint.addOrEditItemModalLabel}\n        >\n          <div className=\"modal-content-wrapper\">\n            <button\n              className=\"close-modal-button expand-click-target\"\n              onClick={close}\n            >\n              <span className=\"close-icon-wrapper\">\n                <IoClose role=\"img\" />\n              </span>\n              <span className=\"visually-hidden\">Close Modal</span>\n            </button>\n            {selectedAction === \"delete-item\" ? (\n              <>\n                <div className=\"modal-label modal-delete-item-label\">\n                  Delete Item\n                </div>\n                <span className=\"block h-3\"></span>\n                <p className=\"confirm-delete-text\">\n                  Are you sure you want to delete item{\" \"}\n                  {listItems.map((index: number) => {\n                    if (index === selectedIndex) {\n                      //                      console.log({ item: item[Object.keys(item)[0]] });\n                      return listItems[selectedIndex][\n                        Object.keys(listItems[selectedIndex])[0]\n                      ]?.value;\n                    } else {\n                      return null;\n                    }\n                  })}\n                  ?\n                </p>\n                <span className=\"block h-6\"></span>\n                <div className=\"flex items-center\">\n                  <button\n                    className=\"el-form-button el-form-button-neutral expand-click-target\"\n                    data-test=\"cancel\"\n                    onClick={() => {\n                      close();\n                    }}\n                  >\n                    Cancel\n                  </button>\n                  <remixBrowserUtils.Form\n                    method=\"post\"\n                    onSubmitCapture={(event) => {\n                      submit(event.currentTarget);\n                      close();\n                    }}\n                  >\n                    <input\n                      type=\"hidden\"\n                      name=\"operation-type\"\n                      value=\"delete-list-item\"\n                    />\n                    <input\n                      type=\"hidden\"\n                      name=\"index-to-delete\"\n                      value={selectedIndex}\n                    />\n                    <button\n                      className=\"el-form-button el-form-button-danger expand-click-target\"\n                      data-test=\"confirm-delete\"\n                      type=\"submit\"\n                    >\n                      Confirm Delete\n                    </button>\n                  </remixBrowserUtils.Form>\n                </div>\n              </>\n            ) : (\n              <>\n                <div className=\"modal-label modal-add-item-label\">\n                  {typeof selectedIndex === \"number\"\n                    ? fieldBlueprint.editItemLabel\n                    : fieldBlueprint.addItemLabel}\n                </div>\n                <span className=\"block h-8\"></span>\n                <remixBrowserUtils.Form\n                  reloadDocument\n                  method=\"post\"\n                  onSubmitCapture={(event) => {\n                    submit(event.currentTarget);\n                    close();\n                  }}\n                >\n                  {selectedAction === \"edit-item\" ? (\n                    <>\n                      <input\n                        type=\"hidden\"\n                        name=\"operation-type\"\n                        value=\"edit-list-item\"\n                      />\n                      <input\n                        type=\"hidden\"\n                        name=\"index-to-change\"\n                        value={selectedIndex}\n                      />\n                    </>\n                  ) : (\n                    <input\n                      type=\"hidden\"\n                      name=\"operation-type\"\n                      value=\"add-item-to-list\"\n                    />\n                  )}\n                  {listItemStructure.map((nestedField) => {\n                    return (\n                      <FormField\n                        remixBrowserUtils={remixBrowserUtils}\n                        context={\n                          typeof selectedIndex === \"number\"\n                            ? fieldContext?.value[selectedIndex]\n                            : fieldContext\n                        }\n                        key={nestedField.name}\n                        field={nestedField}\n                      />\n                    );\n                  })}\n                  <span className=\"block h-4\"></span>\n                  <button\n                    className=\"el-form-button el-form-add-item-button expand-click-target\"\n                    type=\"submit\"\n                  >\n                    Confirm\n                  </button>\n                </remixBrowserUtils.Form>\n              </>\n            )}\n          </div>\n        </DialogContent>\n      </DialogOverlay>\n    </div>\n  );\n}\n", "// @ts-ignore sometimes you walk the line, sometimes it walks you\nimport React from \"react\";\nimport { FormField } from \"../form-field\";\nimport type { StatefulRadioFieldBlueprint } from \"../types\";\nimport {\n  displayFieldLabelDescriptionError,\n  RadioOrCheckboxLabel,\n  RadioOrCheckboxWrapper,\n} from \"./shared/display\";\nimport { createFieldLabel } from \"./shared/logic\";\n\nexport function StatefulRadio({\n  fieldBlueprint,\n  context,\n  remixBrowserUtils,\n}: {\n  fieldBlueprint: StatefulRadioFieldBlueprint;\n  context: any;\n  remixBrowserUtils: {\n    Form: any;\n    useSubmit: any;\n    useState: any;\n    useEffect: any;\n      }\n}) {\n    let {useState} = remixBrowserUtils;\n  let selectedIndex = 0;\n  fieldBlueprint.options.forEach((option, index) => {\n    let defaultValue =\n      context[fieldBlueprint.name]?.value ?? fieldBlueprint.initialValue;\n    if (defaultValue === option) {\n      selectedIndex = index;\n    }\n  });\n\n//  console.log({ context,useState });\n\n  const [selectedValue, setSelectedValue] = useState(selectedIndex);\n\n  return (\n    <>\n      {displayFieldLabelDescriptionError({\n        fieldBlueprint,\n      })}\n      <div className=\"el-field-item\">\n        {fieldBlueprint.options.map((radioValue, index) => {\n          const label = createFieldLabel(radioValue);\n\n          if (index === selectedValue) {\n            return (\n              <RadioOrCheckboxWrapper key={radioValue}>\n                <input\n                  data-test={`${fieldBlueprint.name}-${radioValue}`}\n                  type=\"radio\"\n                  id={`${fieldBlueprint.name}-${radioValue}`}\n                  name={fieldBlueprint.name}\n                  value={radioValue}\n                  onChange={() => {\n                    setSelectedValue(index);\n                  }}\n                  checked={true}\n                  autoComplete=\"off\"\n                />\n                <RadioOrCheckboxLabel\n                  htmlFor={`${fieldBlueprint.name}-${radioValue}`}\n                >\n                  {label}\n                </RadioOrCheckboxLabel>\n              </RadioOrCheckboxWrapper>\n            );\n          } else {\n            return (\n              <RadioOrCheckboxWrapper key={radioValue}>\n                <input\n                  data-test={`${fieldBlueprint.name}-${radioValue}`}\n                  type=\"radio\"\n                  id={`${fieldBlueprint.name}-${radioValue}`}\n                  name={fieldBlueprint.name}\n                  value={radioValue}\n                  onChange={() => {\n                    setSelectedValue(index);\n                  }}\n                  autoComplete=\"off\"\n                />\n                <RadioOrCheckboxLabel\n                  htmlFor={`${fieldBlueprint.name}-${radioValue}`}\n                >\n                  {label}\n                </RadioOrCheckboxLabel>\n              </RadioOrCheckboxWrapper>\n            );\n          }\n        })}\n      </div>\n      {fieldBlueprint.dependentChildren[selectedValue].map((nestedField) => {\n        if (nestedField) {\n          return (\n            <FormField\n            remixBrowserUtils={remixBrowserUtils}\n\n         context={context}\n              key={nestedField.name}\n              field={nestedField}\n            />\n          );\n        }\n        return null;\n      })}\n    </>\n  );\n}\n", "import type { SelectFieldBlueprint } from \"../types\";\n// @ts-ignore sometimes you walk the line, sometimes it walks you\nimport React from \"react\";\nimport {\n  displayFieldLabelDescriptionError,\n} from \"./shared/display\";\nimport { createFieldLabel } from \"./shared/logic\";\nimport {FaChevronDown} from \"react-icons/fa\";\n\nexport function Select({\n  fieldBlueprint,\n  fieldContext,\n  remixBrowserUtils \n}: {\n  fieldContext: { value?: string; errors: string[] };\n  fieldBlueprint: SelectFieldBlueprint;\n  className?: string;\n  remixBrowserUtils: {\n      useState: any;\n      useEffect: any;\n  }\n}) {\n//    console.log({remixBrowserUtils});\n    let {useState} = remixBrowserUtils;\n    let defaultSelectOption = fieldBlueprint.initialValue;\n\n    if (fieldContext?.value) {\n        defaultSelectOption = fieldContext.value;\n    }\n    const [selectedValue, setSelectedValue] = useState(defaultSelectOption);\n  return (\n    <>\n      {displayFieldLabelDescriptionError({\n        fieldBlueprint,\n      })}\n<div className=\"el-select-wrapper\">\n          <select className=\"el-native-select\" id={fieldBlueprint.name}  value={selectedValue} onChange={(e) => setSelectedValue(e.target.value)} name={fieldBlueprint.name}>\n          {fieldBlueprint.options.map((selectOption) => {\n                  //        console.log({ radioValue });\n\n          const label = createFieldLabel(selectOption);\n\n          return (\n            <option key={selectOption} value={selectOption}>{label}</option>\n          )\n                                                      })}\n\n\n          </select>\n          <div className=\"el-select-presentational\">\n          {createFieldLabel(selectedValue)}\n          <div className=\"el-select-icon-wrapper\">\n            <FaChevronDown/>\n            </div>\n          </div>\n        </div>\n    </>\n  );\n}\n", "export const validationPatterns = {\n  phoneNumber: \"\\\\(?([0-9]{3})\\\\)?[-.\\\\s]?([0-9]{3})[-.\\\\s]?([0-9]{4})\",\n  email: \"[a-zA-Z0-9.!#$%&\u2019*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:.[a-zA-Z0-9-]+)*\",\n  postalCode: \"(?!.*[DFIOQU])[A-VXY][0-9][A-Z]\\\\s?[0-9][A-Z][0-9]\",\n  password: \"(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$.%^&*])(?=.{8,}).*\",\n};\n\nconst validationStringPatterns = {\n  letters: \"A-Za-z\",\n  numbers: \"0-9\",\n  spaces: \"\\\\s\",\n  dotsAndCommas: \"\\\\.,\",\n  punctuation: \"\\\"'!\\\\-@#$%*()|;:,\\\\./?\",\n};\n\nexport const validation = {\n  phone: {\n    browserPattern: validationPatterns.phoneNumber,\n    browserMessage: \"valid phone number with area code\",\n    patterns: [`^${validationPatterns.phoneNumber}$`],\n    messages: [\"Provide a valid phone number with area code\"],\n  },\n  email: {\n    browserPattern: validationPatterns.email,\n    browserMessage: \"valid email address\",\n    patterns: [`^${validationPatterns.email}$`],\n    messages: [\"Please provide a valid email address\"],\n  },\n  postalCode: {\n    browserPattern: validationPatterns.postalCode,\n    browserMessage: \"valid postal code\",\n    patterns: [`^${validationPatterns.postalCode}$`],\n    messages: [\"Please provide valid postal code\"],\n  },\n  password: {\n    browserPattern: validationPatterns.password,\n    browserMessage: \"letters, numbers, and special characters\",\n    patterns: [`^${validationPatterns.password}$`],\n    messages: [\"Letters, numbers, and special characters are required\"],\n  },\n  sentences: {\n    browserPattern: `[${validationStringPatterns.letters}${validationStringPatterns.spaces}${validationStringPatterns.numbers}${validationStringPatterns.punctuation}]+`,\n    browserMessage: \"letters, numbers, and special characters\",\n    patterns: [\n      `^[${validationStringPatterns.letters}${validationStringPatterns.spaces}${validationStringPatterns.numbers}${validationStringPatterns.punctuation}]{0,}$`,\n    ],\n    messages: [\"Only letters, numbers, and basic punctuation allowed\"],\n  },\n  lettersOnly: {\n    browserPattern: `[${validationStringPatterns.letters}]+`,\n    browserMessage: \"letters only\",\n    patterns: [\n      `^[${validationStringPatterns.letters}${validationStringPatterns.spaces}]{0,}$`,\n    ],\n    messages: [\"Only letters allowed\"],\n  },\n\n  lettersAndSpaces: {\n    browserPattern: `[${validationStringPatterns.letters}${validationStringPatterns.spaces}]+`,\n    browserMessage: \"letters and spaces only\",\n    patterns: [\n      `^[${validationStringPatterns.letters}${validationStringPatterns.spaces}]{0,}$`,\n    ],\n    messages: [\"Only letters and spaces allowed\"],\n  },\n\n  numbersOnly: {\n    browserPattern: `[${validationStringPatterns.numbers}${validationStringPatterns.dotsAndCommas}]+`,\n    browserMessage: \"numbers only\",\n    patterns: [\n      `^[${validationStringPatterns.numbers}${validationStringPatterns.dotsAndCommas}]{0,}$`,\n    ],\n    messages: [\"Only numbers allowed\"],\n  },\n\n  numbersAndSpaces: {\n    browserPattern: `[${validationStringPatterns.numbers}${validationStringPatterns.dotsAndCommas}${validationStringPatterns.spaces}]+`,\n    browserMessage: \"numbers and spaces only\",\n    patterns: [\n      `^[${validationStringPatterns.numbers}${validationStringPatterns.dotsAndCommas}${validationStringPatterns.spaces}]{0,}$`,\n    ],\n    messages: [\"Only numbers and spaces allowed\"],\n  },\n};\n\nexport type StringValidatorArgs = {\n  min?: number;\n  max?: number;\n  validationType:\n    | \"sentences\"\n    | \"lettersOnly\"\n    | \"lettersAndSpaces\"\n    | \"numbersOnly\"\n    | \"numbersAndSpaces\"\n    | \"phone\"\n    | \"email\"\n    | \"postalCode\"\n    | \"password\";\n  customValidation?: {\n    pattern: string;\n    message: string;\n  };\n};\n\ntype StringValidatorObj = {\n  browserPattern?: string;\n  browserMessage?: string;\n  patterns: string[];\n  messages: string[];\n};\n\n// Create a new string validation function that has chainable methods and\n// will accept an optional message for each validation methods\nexport function stringValidator({\n  min,\n  max,\n  validationType,\n  customValidation,\n}: StringValidatorArgs) {\n  let validationObject: StringValidatorObj = {\n    browserPattern: \"\",\n    browserMessage: \"\",\n    patterns: [],\n    messages: [],\n  };\n\n  min ? null : (min = 0);\n  max ? null : (max = 2000);\n\n  if (customValidation) {\n    return {\n      browserPattern: customValidation.pattern,\n      browserMessage: customValidation.message,\n      patterns: [customValidation.pattern],\n      messages: [customValidation.message],\n    };\n  }\n\n  // Note: we have to do an Object.assign here, we can't simply just\n  // assign validationObject[validationType] to validationObject because\n  // that attaches the the validationType object inside this function.\n  // Any changes that we make inside of this function will mutate the\n  // validation type outside of the object, causing unintended behavior\n  // when we try to reference it again inside of the next function.\n  //\n  // We need a clone with no references to the original object, that's\n  // what Object.assign gives\n  validationObject = Object.assign({}, validation[validationType]);\n\n  if (\n    validationType === \"sentences\" ||\n    validationType === \"lettersOnly\" ||\n    validationType === \"lettersAndSpaces\" ||\n    validationType === \"numbersOnly\" ||\n    validationType === \"numbersAndSpaces\"\n  ) {\n    validationObject.browserPattern = validationObject.browserPattern.replace(\n      \"]+\",\n      `]{${min},${max}}`\n    );\n\n    let patternAlreadyPresent = validationObject.patterns.find(\n      (element) => element === `^.{${min},}$`\n    );\n    // console.log({patternAlreadyPresent});\n    if (!patternAlreadyPresent) {\n      validationObject.patterns = [\n        ...validationObject.patterns,\n        `^.{${min},}$`,\n        `^.{0,${max}}$`,\n      ];\n      validationObject.messages = [\n        ...validationObject.messages,\n        `Must be at least ${min} characters`,\n        `Must be no more than ${max} characters`,\n      ];\n    }\n  }\n  return validationObject;\n}\n"],
  "mappings": "4jBAAA,2LCIO,WAAgC,CACrC,gBACA,OACA,WAKM,CAZR,MAcE,WAA2B,EAAuB,CAdpD,UAgBI,GAAI,GAgBJ,GAbE,GAAM,OAAS,SACf,EAAM,OAAS,YACf,EAAM,OAAS,QACf,EAAM,OAAS,YACf,EAAM,OAAS,SACnB,EAAM,OAAS,UACX,EAAM,OAAS,UACf,EAAM,OAAS,mBAEf,GACE,QAAK,IAAI,GAAG,EAAM,MAAM,IAAxB,cAA2B,aAA3B,OAAyC,EAAM,cAG/C,EAAM,OAAS,WAAY,CAC7B,GAAI,GAAgB,KAAK,IAAI,GAAG,EAAM,MAAM,IAAxB,cAA2B,WAK/C,GAAI,CAAC,EACH,OAEF,EAAiB,CACnB,CAEA,GAAI,GAAmB,CAAC,EAGxB,AACE,GAAM,OAAS,QACf,EAAM,OAAS,YACf,EAAM,OAAS,SACf,EAAM,OAAS,aAEX,CAAC,GAAkB,EAAM,UAC3B,EAAO,KAAK,wBAAwB,EAIpC,MAAO,IAAU,UAIf,GACF,GAAQ,GAAG,EAAM,QAAU,CACzB,MAAO,EACP,QACF,GAMA,EAAM,OAAS,kBAIjB,EAAM,kBAAkB,QAAQ,AAAC,GAAW,CAC1C,AAAI,MAAO,GAAW,KACpB,EAAO,QAAQ,AAAC,GAAgB,CAC9B,AAAI,GACF,EAAkB,CAAW,CAEjC,CAAC,CAEL,CAAC,EAGC,EAAM,OAAS,kBACjB,EAAM,WAAW,QAAQ,AAAC,GAAa,CAGrC,MAAO,GAAQ,GAAG,EAAS,QAG3B,EAAkB,CAAQ,CAE5B,CAAC,CAEL,CAKA,GAAM,GAAkB,EAAQ,YAMhC,OAAW,KAAS,KAAc,KAAd,cAAgC,OAClD,AAAI,GACF,EAAkB,CAAK,CAK7B,CC/GO,WAA+B,CACpC,UACA,iBAIU,CAXZ,UAYE,GAAI,GAAgB,GAGd,EAAkB,EAAQ,YAM5B,EAA6B,CAAC,EAElC,OAAW,KAAS,KAAc,KAAd,cAAgC,OAGlD,AAAI,GACF,GAA8B,EAAO,EAAkB,CAAO,EAKlE,OAAW,KAAmB,GAK5B,GAJI,SAAQ,GAAG,OAAX,cAA+B,SAA/B,cAAuC,SAAU,GACnD,GAAgB,IAGd,EACF,MAAO,GAGX,MAAO,EACT,CAEA,YACE,EACA,EACA,EACA,CAGA,GAFA,EAAiB,KAAK,EAAM,IAAI,EAE5B,EAAM,OAAS,iBAAkB,CACnC,GAAI,GAAgB,EAAM,QAAQ,QAAQ,EAAQ,GAAG,EAAM,QAAQ,KAAK,EACxE,EAAM,kBAAkB,GAAe,QAAQ,AAAC,GAAgB,CAC9D,AAAI,GACF,EAAiB,KAAK,EAAY,IAAI,CAE1C,CAAC,CACH,CACF,CCxDA,iBAAqC,CACnC,eACA,UACA,sBACA,UACA,UACA,6BAYC,CACD,GAAM,CAAE,gBAAe,WAAU,QAAS,EAMtC,EAAsC,KAAM,GAC9C,EACA,CACF,EACI,CAAC,EAAS,GAAW,EAEzB,MAAI,GAGF,GAAU,CAAC,EACX,EAAQ,0BAA4B,EACpC,EAAQ,wBAA0B,GAClC,EAAQ,IAAI,UAAW,CAAO,EAEvB,EAAS,EAAqB,CACnC,QAAS,CACP,aAAc,KAAM,GAAc,CAAO,CAC3C,CACF,CAAC,GAED,GAAQ,0BAA4B,GACpC,EAAQ,wBAA0B,EAClC,EAAQ,IAAI,UAAW,CAAO,EAEvB,EACL,CAAC,EACD,CACE,QAAS,CACP,aAAc,KAAM,GAAc,CAAO,CAC3C,CACF,CACF,EAEJ,CC7DA,iBAAoD,CAClD,gBACA,gBACA,UACA,UACA,WACA,WACA,OACA,iBAUe,CAlBjB,UAmBE,GAAI,GAAiB,KAAc,iBAAS,eAAvB,cAAqC,OAAO,KAC/D,AAAC,GACQ,EAAK,OAAS,mBAGrB,EAAoB,uBAAU,EAAe,QAAzB,cAAgC,QAAhC,OAAyC,CAAC,EAElE,GAAI,IAAkB,mBAAoB,CACxC,GAAI,GAAsB,CAAC,EAE3B,EAAe,kBAAkB,QAAQ,AAAC,GAAe,CACvD,EAAe,EAAM,MAAQ,CAC3B,MAAO,EAAK,IAAI,EAAM,IAAI,EAC1B,OAAQ,CAAC,CACX,CACF,CAAC,EAED,EAAkB,KAAK,CAAc,CACvC,SAAW,IAAkB,iBAAkB,CAC7C,GAAI,GAAgB,EAAK,IAAI,iBAAiB,EAC9C,EAAe,kBAAkB,QAAQ,AAAC,GAAe,CACvD,EAAkB,OAAO,CAAa,GAAG,EAAM,MAAQ,CACrD,MAAO,EAAK,IAAI,EAAM,IAAI,EAC1B,OAAQ,CAAC,CACX,CACF,CAAC,CACH,SAAW,IAAkB,mBAAoB,CAC/C,GAAI,GAAgB,EAAK,IAAI,iBAAiB,EAE9C,EAAkB,OAAO,OAAO,CAAa,EAAG,CAAC,CACnD,CACA,SAAQ,IAAI,UAAW,CACrB,GAAG,EACH,CAAC,EAAe,MAAO,CACrB,MAAO,EACP,OAAQ,CAAC,CACX,CACF,CAAC,EAEM,EAAS,EAAU,CACxB,QAAS,CACP,aAAc,KAAM,GAAc,CAAO,CAC3C,CACF,CAAC,CACH,CC9DO,WAA+B,CAAE,QAA4B,CAKlE,MAJoB,IAAK,IAAI,YAAY,CAS3C,CCTO,WAAsB,CAC3B,UACA,iBAIiC,CAKjC,GAAI,EAAc,SAAW,EAC3B,MAAO,MAET,GAAM,GAAyB,EAAc,OAQ7C,MANE,GAAQ,cAAgB,EACpB,YACA,OAAO,EAAQ,WAAW,EAAI,IAAM,EACpC,MACA,QAGR,CA4BO,WAA6B,EAAgB,CAClD,GAAI,GAAe,EAAO,OACtB,EAAS,GAEb,OAAS,GAAI,EAAG,EAAI,EAAc,IAAK,CAErC,GAAI,GAAa,EAAO,WAAW,CAAC,EAIpC,AAAI,IAAe,MAAQ,IAAe,KAGxC,GAAU,IAEV,GAAU,EAAO,EAErB,CAIA,MAAO,EACT,CCnEO,WAAgC,CACrC,YACA,WAIC,CAUD,GAAI,EAAU,OAAS,SAIvB,IACE,EAAU,OAAS,QACnB,EAAU,OAAS,YACnB,EAAU,OAAS,SACnB,EAAU,OAAS,WACnB,CACA,GAAI,GAAoB,EAAQ,GAAG,EAAU,QAAQ,MAErD,EAAU,WAAW,SAAS,QAAQ,CAAC,EAAS,IAAU,CAUxD,AACE,CAVmB,GAAmB,CACtC,MAAO,EACP,MAAO,CACT,CAAC,GAQC,CAAC,EAAQ,GAAG,EAAU,QAAQ,OAAO,SACnC,EAAU,WAAW,SAAS,EAChC,GAIA,EAAQ,GAAG,EAAU,QAAQ,OAAO,KAClC,EAAU,WAAW,SAAS,EAChC,CAEJ,CAAC,CACH,CAEA,GAAI,EAAU,OAAS,iBAAkB,CACvC,GAAI,GAAoB,EAAQ,GAAG,EAAU,QAAQ,MACjD,CAAE,qBAAsB,EAGtB,EACJ,EAAU,QAAQ,QAAQ,CAAiB,EAE7C,AAAI,MAAO,IAAsB,UAC/B,EAAkB,GAAoB,QAAQ,AAAC,GAAmB,CAChE,AAAI,MAAO,GAAmB,KAC5B,EAAuB,CAAE,UAAS,UAAW,CAAe,CAAC,CAEjE,CAAC,CAEL,EACF,CAEA,YAA4B,CAC1B,QACA,SAIC,CACD,GAAI,GAAmB,GAAI,QAAO,GAAG,IAAS,KAAK,EAEnD,SAAQ,EAAoB,CAAK,EAQ1B,EAAiB,KAAK,CAAK,CACpC,CCtFA,kBAAyC,CACvC,UACA,gBACA,eACA,sBACA,6BAae,CA7BjB,UA+BE,GAAM,CAAE,gBAAe,aAAY,iBAAgB,YACjD,EAEE,EAA0C,QAC9C,EAAc,OAAS,EAClB,EAAmB,YACnB,EAAmB,QAGxB,GAAM,GAAU,KAAM,GAAW,EAAQ,QAAQ,IAAI,QAAQ,CAAC,EAI1D,CAAE,YAAa,GAAI,KAAI,EAAQ,GAAG,EAElC,EAAe,KAAQ,IAAI,SAAS,IAArB,OAA0B,CAAC,EAM9C,GAAI,IAAqB,aAAe,OAAO,KAAK,CAAO,EAAE,OAAS,EAAG,CACvE,GAAI,CAAE,YAAa,GAAI,KAAI,EAAQ,GAAG,EAItC,MAAO,GAAS,EAAU,CACxB,QAAS,CACP,aAAc,KAAM,GAAe,CAAO,CAC5C,CACF,CAAC,CACH,CAEA,GAAM,GAAO,KAAM,GAAQ,SAAS,EAKpC,GAFuB,EAAsB,CAAE,MAAK,CAAC,EAGnD,MAAO,GAAS,GAAG,EAGrB,GAAM,GAAgB,EAAK,IAAI,gBAAgB,EAK/C,GAAI,EACF,MAAO,MAAM,GAA8B,CACzC,gBACA,gBACA,UACA,UACA,gBACA,WACA,OACA,UACF,CAAC,EAGH,GAAI,GACF,QAAK,IAAI,aAAa,IAAtB,cAAyB,aAAzB,OAAuC,GAKzC,GAAI,IAAqB,aACnB,IAAe,OACjB,SAAQ,aAAe,EAEvB,EAAQ,IAAI,UAAW,CAAO,EAEvB,EAAS,EAAU,CACxB,QAAS,CACP,aAAc,KAAM,GAAc,CAAO,CAC3C,CACF,CAAC,EAaL,GARA,KAAM,GAAuB,CAC3B,gBACA,OACA,SACF,CAAC,EAIG,CAAC,EAAc,EAAQ,aAAa,OACtC,KAAM,IAAI,OAAM,kCAAkC,EAGpD,EAAc,GAAG,OAAO,QAAQ,AAAC,GAAc,CAC7C,EAAuB,CAAE,UAAS,WAAU,CAAC,CAC/C,CAAC,EAED,GAAI,GAAmB,CAAC,EAExB,OAAW,KAAe,GAGxB,EAAY,GAAe,EAAQ,GAAa,MAkBlD,GAbA,EAAQ,IAAI,UAAW,CAAO,EAa1B,CAPkB,EAAsB,CAC1C,UACA,eACF,CAAC,EAIqB,CAGpB,GAAM,GAAY,EAAa,CAAE,gBAAe,SAAQ,CAAC,EASzD,MARA,GAAQ,UAAY,EAQhB,IAAqB,QAChB,EAAe,CACpB,UACA,eACA,UACA,sBACA,4BACA,SACF,CAAC,EAaC,IAAc,OAAS,IAAe,SAGjC,EAAe,CACpB,eACA,UACA,sBACA,4BACA,UACA,SACF,CAAC,EAKD,GAAQ,aAAe,EAGvB,EAAQ,IAAI,UAAW,CAAO,EAEvB,EAAS,EAAU,CACxB,QAAS,CACP,aAAc,KAAM,GAAc,CAAO,CAC3C,CACF,CAAC,EAEL,CAEA,MAAO,GAAS,EAAU,CACxB,QAAS,CACP,aAAc,KAAM,GAAc,CAAO,CAC3C,CACF,CAAC,CACH,CC5MA,WAAiC,CAC/B,gBACA,WAIM,CAEN,GAAI,CAAC,EACH,MAAO,CAAC,EAGV,GAAI,GAAkB,GAUtB,OAAW,KAAQ,GAAe,CAEhC,OAAW,KAAS,kBAAM,OAAQ,CAChC,GAAI,EACF,MAAO,CAAC,EAGV,EAAkB,EAAwB,CAAE,QAAO,SAAQ,CAAC,CAC9D,CACA,GAAI,EAKF,MAAO,CAAC,CAEZ,CAEA,MAAO,EACT,CAEA,WAAiC,CAC/B,QACA,WAIC,CAID,GAAI,EAAM,OAAS,iBACjB,MAAO,GAGT,GAAI,GAAmB,EAAQ,GAAG,EAAM,QAKxC,MAHI,OAAO,GAAqB,KAI9B,MAAO,kBAAkB,QAAU,UACnC,MAAO,kBAAkB,QAAU,SAI5B,GAKL,GAAM,OAAS,kBACjB,EAAM,kBAAkB,QAAQ,AAAC,GAAW,CAC1C,EAAO,QAAQ,AAAC,GAAgB,CAC9B,AAAI,GACF,EAAwB,CAAE,MAAO,EAAa,SAAQ,CAAC,CAE3D,CAAC,CACH,CAAC,EAGC,EAAM,OAAS,mBACjB,EAAM,kBAAkB,QAAQ,AAAC,GAAgB,CAC/C,AAAI,GACF,EAAwB,CAAE,MAAO,EAAa,SAAQ,CAAC,CAE3D,CAAC,EAGI,GACT,CCvGA,WAAsC,CACpC,iBAGM,CAEN,GAAI,GAAe,CAAC,EAEpB,OAAW,KAAQ,GAIjB,OAAW,KAAS,kBAAM,OAGxB,AAAI,GACF,GAAkB,CAAE,QAAO,SAAQ,CAAC,EAK1C,SAAQ,YAAc,EAEf,CACT,CAEA,YAA2B,CACzB,QACA,WAIC,CACD,AAAI,EAAM,OAAS,kBAAoB,EAAM,OAAS,kBACpD,EAAQ,GAAG,EAAM,QAAU,CACzB,MAAO,EAAM,cAAgB,GAC7B,OAAQ,CAAC,CACX,EACK,AAAI,EAAM,OAAS,iBACxB,EAAM,WAAW,QAAQ,AAAC,GAAa,CACrC,AAAI,EAAS,cACX,GAAQ,GAAG,EAAS,QAAU,CAC5B,MAAO,EAAS,cAAgB,GAChC,OAAQ,CAAC,CACX,EAEJ,CAAC,EACQ,EAAM,OAAS,mBACxB,GAAQ,GAAG,EAAM,QAAU,CACzB,MAAO,EAAM,cAAgB,CAAC,EAC9B,OAAQ,CAAC,CACX,GAKE,EAAM,OAAS,kBACjB,EAAM,kBAAkB,QAAQ,AAAC,GAAW,CAC1C,EAAO,QAAQ,AAAC,GAAgB,CAC9B,AAAI,MAAO,GAAgB,KACzB,GAAkB,CAAE,MAAO,EAAa,SAAQ,CAAC,CAErD,CAAC,CACH,CAAC,CAEL,CC/DA,kBAAyC,CACvC,UACA,gBACA,6BAUe,CAjBjB,UAmBE,GAAM,CAAE,gBAAe,aAAY,iBAAgB,QACjD,EAEI,EAAU,KAAM,GAAW,EAAQ,QAAQ,IAAI,QAAQ,CAAC,EAE1D,EAAU,EAAQ,IAAI,SAAS,EAKnC,EAAU,EAAwB,CAChC,gBACA,SACF,CAAC,EAIG,OAAO,KAAK,CAAO,EAAE,OAAS,GAEhC,GAAU,EAA6B,CACrC,eACF,CAAC,GAIH,EAAQ,YAAc,oBAAS,cAAT,OAAwB,EAI1C,EAAQ,YAAc,GACxB,GAAQ,YAAc,GAGxB,GAAI,GAAY,EAAa,CAAE,UAAS,eAAc,CAAC,EAMvD,MAAI,GAAQ,YAAc,GAAK,OAAO,KAAK,CAAO,EAAE,OAAS,EAGpD,EACL,CAAC,EACD,CACE,QAAS,CACP,aAAc,KAAM,GAAe,CAAO,CAC5C,CACF,CACF,EAGF,GAAQ,UAAY,EAEpB,EAAQ,eAAiB,KAAc,EAAQ,eAAtB,cAAoC,eAE7D,EAAQ,eAAiB,KAAc,EAAQ,eAAtB,cAAoC,eAE7D,EAAQ,IAAI,UAAW,CAAO,EAGvB,CACL,UACA,cAAe,EAAc,EAAQ,aACrC,gBACA,SACF,EACF,CCnFA,MAAkB,oBCDlB,MAAkB,oBCDlB,OAAkB,oBAGX,YAAqB,CAC1B,eACA,kBASC,CAfH,QAgBE,GAAI,GAAe,KAAe,eAAf,OAA+B,GAC9C,EAAQ,oBAAc,QAAd,OAAuB,EACnC,MAAO,0BAAC,SAAM,KAAK,SAAS,KAAM,EAAe,KAAM,MAAO,EAAO,CACvE,CClBA,MAAkB,oBCClB,MAAkB,oBAUX,YAAoB,CACzB,YACA,YAIC,CACD,MACE,iDACE,wBAAC,QACC,UAAW,sBAAsB,EAAY,IAAM,EAAY,MAE9D,CACH,CACF,CAEJ,CAEO,YAA0B,CAAE,YAAqC,CACtE,MAAI,GACK,wBAAC,KAAE,UAAU,6BAA6B,CAAS,EAGrD,IACT,CAEO,YAA4B,CACjC,cACA,gBAIC,CACD,MACE,iDACG,EAAY,QAAU,GAAK,EACxB,EAAY,IAAI,AAAC,GAGX,EAAY,SAAW,EAEvB,wBAAC,OAAI,UAAU,sBAAsB,IAAK,GACvC,CACH,EAIA,wBAAC,OAAI,UAAU,sBAAsB,IAAK,GAAY,KACjD,CACL,CAGL,EACD,IACN,CAEJ,CAEO,WAA2C,CAChD,iBACA,cACA,gBAWC,CAID,MACE,iDACE,wBAAC,SAAM,QAAS,EAAe,KAAM,IAAK,EAAe,MACvD,wBAAC,QAAY,EAAe,KAAM,CACpC,EAEA,wBAAC,QAAkB,EAAe,WAAY,EAE7C,GAAe,EACZ,GAAmB,CAAE,cAAa,cAAa,CAAC,EAChD,IACN,CAEJ,CAEO,WAAgC,CACrC,YACA,YAIC,CAGD,MACE,iDACE,wBAAC,OACC,UAAW,+BACT,EAAY,IAAM,EAAY,MAG/B,CACH,CACF,CAEJ,CAEO,WAA8B,CACnC,YACA,WACA,WAKC,CACD,MACE,yBAAC,SACC,QAAS,EACT,UAAW,6BACT,EAAY,IAAM,EAAY,MAG/B,CACH,CAEJ,CC7IO,WAA0B,EAAmB,CAClD,GAAI,GAAQ,EAAU,MAAM,GAAG,EAE/B,OAAS,GAAI,EAAG,EAAI,EAAM,OAAQ,IAChC,EAAM,GAAK,EAAM,GAAG,GAAG,YAAY,EAAI,EAAM,GAAG,MAAM,CAAC,EAGzD,MAAO,GAAM,KAAK,GAAG,CACvB,CAEO,WAAkB,CACvB,EACA,kBACA,iBACA,eAMC,CAGD,GAAI,GAAe,GACnB,EAAgB,SAAS,QAAQ,MAAO,EAAS,IAAU,CA3B7D,MA4BI,GAAI,GAAmB,GAAI,QAAO,EAAS,KAAK,EAE5C,EAAQ,EAAoB,oBAAG,gBAAH,cAAkB,KAAK,EAEnD,EAAsB,EAAiB,KAAK,CAAK,EAErD,GADK,GAAqB,GAAe,IACrC,EAAqB,CAEvB,GAAI,GAAe,EAAY,QAAQ,EAAgB,SAAS,EAAM,EAGtE,AAAI,EAAe,IACjB,EAAY,OAAO,EAAc,CAAC,CAEtC,KAAO,AAAK,GAAY,SAAS,EAAgB,SAAS,EAAM,GAI9D,EAAe,CAAC,GAAG,EAAa,EAAgB,SAAS,EAAM,CAAC,CAEpE,CAAC,EACG,GACF,EAAe,CAAC,CAAC,CAErB,CAEO,YAAsB,CAC3B,iBACA,eACA,qBAeC,CAxEH,QAyEE,GAAI,CAAE,YAAa,EAEf,EAAmB,CAAC,EACpB,EAAU,GAEd,AACE,GAAe,OAAS,SACxB,EAAe,OAAS,YACxB,EAAe,OAAS,QACxB,EAAe,OAAS,aAEpB,WAAc,QAChB,GAAS,iBAAc,OAEnB,kBAAc,OAAO,SAAU,GAAG,GAAU,KAIpD,GAAI,CAAC,EAAa,GAAkB,EAAS,CAAM,EAC/C,CAAC,EAAc,GAAmB,EAAS,CAAO,EAKlD,EAAe,KAAe,eAAf,OAA+B,GAC9C,EAAe,oBAAc,QAAd,OAAuB,EAE1C,MAAO,CACL,cACA,eACA,iBACA,kBACA,cACF,CACF,CFrGO,YAAmB,CACxB,iBACA,eACA,YACA,qBASC,CACD,GAAI,CACF,eACA,cACA,iBACA,eACA,mBACE,GAAa,CAAE,iBAAgB,eAAc,mBAAkB,CAAC,EAGpE,MACE,iDACG,EAAkC,CACjC,iBACA,cACA,cACF,CAAC,EACA,EAAe,OAAS,QACzB,EAAe,OAAS,YACxB,EAAe,OAAS,QACtB,wBAAC,SACC,YAAW,EAAe,KAC1B,KAAM,EAAe,KACrB,GAAI,EAAe,KACnB,UAAW,gBAAgB,EAAY,IAAM,EAAY,KACzD,SAAU,EAAe,SACzB,aAAc,EACd,YAAa,EAAe,YAC5B,OAAQ,IAAM,EAAgB,EAAI,EAClC,SAAU,AAAC,GAAU,CACnB,EAAS,CACP,EAAG,EACH,iBACA,cACA,gBAAiB,EAAe,UAClC,CAAC,CACH,EACA,QAAS,EAAe,WAAW,eACnC,MAAO,EAAe,WAAW,eACjC,KAAM,EAAe,KACrB,YAAY,QACZ,aAAa,QACf,EACE,EAAe,OAAS,WAC1B,wBAAC,YACC,KAAM,EAAe,KACrB,GAAI,EAAe,KACnB,YAAW,EAAe,KAC1B,UAAU,gBACV,SAAU,EAAe,SACzB,KAAM,EACN,aAAc,EACd,YAAa,EAAe,YAC5B,OAAQ,IAAM,EAAgB,EAAI,EAClC,SAAU,AAAC,GAAU,CACnB,EAAS,CACP,EAAG,EACH,iBACA,cACA,gBAAiB,EAAe,UAClC,CAAC,CACH,EACF,EACE,IACN,CAEJ,CG7EO,YAAe,CACpB,iBACA,gBAKC,CACD,MACE,yCACG,EAAkC,CACjC,gBACF,CAAC,EAEA,EAAe,QAAQ,IAAI,AAAC,GAAe,CAG1C,GAAI,GAAoB,EAAe,aAEvC,AAAI,WAAc,OAChB,GAAoB,EAAa,OAGnC,GAAM,GAAQ,EAAiB,CAAU,EACzC,MACE,qBAAC,GAAuB,IAAK,GAAG,EAAe,QAAQ,KACrD,oBAAC,SACC,YAAW,GAAG,EAAe,QAAQ,IACrC,IAAK,EACL,KAAK,QACL,GAAI,GAAG,EAAe,QAAQ,IAC9B,KAAM,EAAe,KACrB,MAAO,EACP,aAAa,MACb,eAAgB,IAAe,EACjC,EACA,oBAAC,GACC,UAAU;AAAA,gBAEV,QAAS,GAAG,EAAe,QAAQ,KAElC,CACH,CACF,CAEJ,CAAC,CACH,CAEJ,CC3CO,YAAuB,CAC5B,iBACA,WAKC,CACD,MACE,yCACG,EAAkC,CACjC,gBACF,CAAC,EAEA,EAAe,WAAW,IAAI,AAAC,GAE5B,oBAAC,GAAuB,IAAK,EAAS,MACpC,oBAAC,SACC,YAAW,GAAG,EAAS,QAAQ,EAAS,QACxC,IAAK,EAAS,KACd,KAAK,WACL,GAAI,EAAS,KACb,KAAM,EAAS,KACf,MAAO,EAAS,MAChB,aAAa,MACb,eAAgB,iBAAU,EAAS,MACrC,EACA,oBAAC,GACC,UAAU;AAAA,gBAEV,QAAS,EAAS,MAEjB,EAAS,KACZ,CACF,CAEH,CACH,CAEJ,CClDA,MAAkB,oBAClB,EAA6C,yBAC7C,GAA6B,0BAG7B,OAAwB,2BAEjB,YAAwB,CAC7B,iBACA,eACA,qBAaC,CACD,GAAI,CAAE,WAAU,aAAc,EACxB,EAAS,EAAkB,UAAU,EACrC,CAAC,EAAY,GAAiB,EAAS,EAAK,EAC5C,CAAC,EAAe,GAAoB,EAAS,MAAS,EACtD,CAAC,EAAgB,GAAqB,EAAS,EAAE,EACjD,CAAC,EAAW,GAAgB,EAAS,CAAC,CAAC,EACvC,EAAO,IAAM,EAAc,EAAI,EAC/B,EAAQ,IAAM,EAAc,EAAK,EAEvC,EAAU,IAAM,CAGd,EAAa,iBAAc,KAAK,CAElC,EAAG,CAAC,EAAc,CAAS,CAAC,EAE5B,GAAI,CAAE,qBAAsB,EAExB,EAAsB,CAAC,EAC3B,SAAkB,QAAQ,AAAC,GAAU,CAEnC,AAAI,EAAM,mBACR,GAAoB,EAAM,MAAQ,EAEtC,CAAC,EAGC,wBAAC,OAAI,UAAU,iBACZ,EAAkC,CACjC,gBACF,CAAC,EAED,wBAAC,UACC,UAAU,6DACV,QAAS,AAAC,GAAM,CACd,EAAE,eAAe,EACjB,EAAiB,MAAS,EAC1B,EAAkB,EAAE,EACpB,EAAK,CACP,GAEA,wBAAC,QAAK,UAAU,qBACd,wBAAC,oBAAa,CAChB,EACC,EAAe,YAClB,EAEC,kBAAW,QAAS,GACnB,gDACE,wBAAC,OAAI,UAAU,4BACb,wBAAC,aACC,wBAAC,aACC,wBAAC,MAAG,UAAU,WACX,EAAkB,IAAI,AAAC,GAEpB,OAAO,KAAK,CAAmB,EAAE,SAC/B,EAAY,IACd,EAGE,wBAAC,MACC,UAAU,WACV,YAEE,EAAY,UAEd,kBAEE,EAAY,UAEd,IAAK,EAAY,MAEhB,EAAY,KACf,EAGK,IAEV,EACD,wBAAC,MAAG,UAAU,WAAW,YAAW,GAAG,MAEvC,EACA,wBAAC,MAAG,UAAU,WAAW,YAAW,GAAG,MAEvC,CACF,CACF,EAEA,wBAAC,aACE,EAAU,IAAI,CAAC,EAAW,IAGvB,wBAAC,MAAG,UAAU,UAAU,IAAK,GAC1B,OAAO,KAAK,CAAmB,EAAE,IAChC,CAAC,EAAa,IAAU,CAxHhD,OA2H0B,GAAI,GAEA,GAEJ,SAAkB,QAAQ,AAAC,GAAuB,CAChD,AAAI,EAAc,OAAS,GACzB,GAAgB,EAAc,UAC9B,GAAiB,EAAc,UAEnC,CAAC,EAWC,wBAAC,MACC,UAAU,WACV,YAAW,EACX,kBAAiB,GACjB,IAAK,GAAG,EAAK,MAAgB,KAE5B,MAAK,KAAL,eAAmB,KACtB,CAEJ,CACF,EACA,wBAAC,MACC,UAAU,WACV,kBAAgB,QAChB,YAAW,GAEX,wBAAC,UACC,UAAU,uCACV,YAAW,QAAQ,IACnB,QAAS,AAAC,GAAM,CACd,EAAE,eAAe,EACjB,EAAiB,CAAK,EACtB,EAAkB,WAAW,EAE7B,EAAK,CACP,GACD,MAED,CACF,EACA,wBAAC,MACC,UAAU,WACV,kBAAgB,QAChB,YAAW,GAEX,wBAAC,UACC,UAAU,yCACV,YAAW,UAAU,IACrB,QAAS,AAAC,GAAM,CACd,EAAE,eAAe,EACjB,EAAiB,CAAK,EACtB,EAAkB,aAAa,EAE/B,EAAK,CACP,GACD,QAED,CACF,CACF,CAEH,CACH,CACF,CACF,CACF,EAEF,wBAAC,iBACC,UAAU,gCACV,OAAQ,EACR,UAAW,GAEX,wBAAC,iBACC,UAAU,gCACV,aAAY,EAAe,yBAE3B,wBAAC,OAAI,UAAU,yBACb,wBAAC,UACC,UAAU,yCACV,QAAS,GAET,wBAAC,QAAK,UAAU,sBACd,wBAAC,YAAQ,KAAK,MAAM,CACtB,EACA,wBAAC,QAAK,UAAU,mBAAkB,aAAW,CAC/C,EACC,IAAmB,cAClB,gDACE,wBAAC,OAAI,UAAU,uCAAsC,aAErD,EACA,wBAAC,QAAK,UAAU,YAAY,EAC5B,wBAAC,KAAE,UAAU,uBAAsB,uCACI,IACpC,EAAU,IAAI,AAAC,GAAkB,CAnOpD,MAoOoB,MAAI,KAAU,EAEL,KAAU,GACf,OAAO,KAAK,EAAU,EAAc,EAAE,MADjC,cAEJ,MAEI,IAEX,CAAC,EAAE,GAEL,EACA,wBAAC,QAAK,UAAU,YAAY,EAC5B,wBAAC,OAAI,UAAU,qBACb,wBAAC,UACC,UAAU,4DACV,YAAU,SACV,QAAS,IAAM,CACb,EAAM,CACR,GACD,QAED,EACA,wBAAC,EAAkB,KAAlB,CACC,OAAO,OACP,gBAAiB,AAAC,GAAU,CAC1B,EAAO,EAAM,aAAa,EAC1B,EAAM,CACR,GAEA,wBAAC,SACC,KAAK,SACL,KAAK,iBACL,MAAM,mBACR,EACA,wBAAC,SACC,KAAK,SACL,KAAK,kBACL,MAAO,EACT,EACA,wBAAC,UACC,UAAU,2DACV,YAAU,iBACV,KAAK,UACN,gBAED,CACF,CACF,CACF,EAEA,gDACE,wBAAC,OAAI,UAAU,oCACZ,MAAO,IAAkB,SACtB,EAAe,cACf,EAAe,YACrB,EACA,wBAAC,QAAK,UAAU,YAAY,EAC5B,wBAAC,EAAkB,KAAlB,CACC,eAAc,GACd,OAAO,OACP,gBAAiB,AAAC,GAAU,CAC1B,EAAO,EAAM,aAAa,EAC1B,EAAM,CACR,GAEC,IAAmB,YAClB,gDACE,wBAAC,SACC,KAAK,SACL,KAAK,iBACL,MAAM,iBACR,EACA,wBAAC,SACC,KAAK,SACL,KAAK,kBACL,MAAO,EACT,CACF,EAEA,wBAAC,SACC,KAAK,SACL,KAAK,iBACL,MAAM,mBACR,EAED,EAAkB,IAAI,AAAC,GAEpB,wBAAC,GACC,kBAAmB,EACnB,QACE,MAAO,IAAkB,SACrB,iBAAc,MAAM,GACpB,EAEN,IAAK,EAAY,KACjB,MAAO,EACT,CAEH,EACD,wBAAC,QAAK,UAAU,YAAY,EAC5B,wBAAC,UACC,UAAU,6DACV,KAAK,UACN,SAED,CACF,CACF,CAEJ,CACF,CACF,CACF,CAEJ,CCrVA,MAAkB,oBAUX,YAAuB,CAC5B,iBACA,UACA,qBAUC,CACC,GAAI,CAAC,YAAY,EACf,EAAgB,EACpB,EAAe,QAAQ,QAAQ,CAAC,EAAQ,IAAU,CA3BpD,QA8BI,AAAI,AADF,SAAQ,EAAe,QAAvB,cAA8B,QAA9B,OAAuC,EAAe,gBACnC,GACnB,GAAgB,EAEpB,CAAC,EAID,GAAM,CAAC,EAAe,GAAoB,EAAS,CAAa,EAEhE,MACE,iDACG,EAAkC,CACjC,gBACF,CAAC,EACD,wBAAC,OAAI,UAAU,iBACZ,EAAe,QAAQ,IAAI,CAAC,EAAY,IAAU,CACjD,GAAM,GAAQ,EAAiB,CAAU,EAEzC,MAAI,KAAU,EAEV,wBAAC,GAAuB,IAAK,GAC3B,wBAAC,SACC,YAAW,GAAG,EAAe,QAAQ,IACrC,KAAK,QACL,GAAI,GAAG,EAAe,QAAQ,IAC9B,KAAM,EAAe,KACrB,MAAO,EACP,SAAU,IAAM,CACd,EAAiB,CAAK,CACxB,EACA,QAAS,GACT,aAAa,MACf,EACA,wBAAC,GACC,QAAS,GAAG,EAAe,QAAQ,KAElC,CACH,CACF,EAIA,wBAAC,GAAuB,IAAK,GAC3B,wBAAC,SACC,YAAW,GAAG,EAAe,QAAQ,IACrC,KAAK,QACL,GAAI,GAAG,EAAe,QAAQ,IAC9B,KAAM,EAAe,KACrB,MAAO,EACP,SAAU,IAAM,CACd,EAAiB,CAAK,CACxB,EACA,aAAa,MACf,EACA,wBAAC,GACC,QAAS,GAAG,EAAe,QAAQ,KAElC,CACH,CACF,CAGN,CAAC,CACH,EACC,EAAe,kBAAkB,GAAe,IAAI,AAAC,GAChD,EAEA,wBAAC,GACD,kBAAmB,EAEtB,QAAS,EACJ,IAAK,EAAY,KACjB,MAAO,EACT,EAGG,IACR,CACH,CAEJ,CC5GA,MAAkB,oBAKlB,OAA4B,0BAErB,YAAgB,CACrB,iBACA,eACA,qBASC,CAEC,GAAI,CAAC,YAAY,EACb,EAAsB,EAAe,aAEzC,AAAI,WAAc,OACd,GAAsB,EAAa,OAEvC,GAAM,CAAC,EAAe,GAAoB,EAAS,CAAmB,EACxE,MACE,iDACG,EAAkC,CACjC,gBACF,CAAC,EACP,wBAAC,OAAI,UAAU,qBACL,wBAAC,UAAO,UAAU,mBAAmB,GAAI,EAAe,KAAO,MAAO,EAAe,SAAU,AAAC,GAAM,EAAiB,EAAE,OAAO,KAAK,EAAG,KAAM,EAAe,MAC5J,EAAe,QAAQ,IAAI,AAAC,GAAiB,CAG9C,GAAM,GAAQ,EAAiB,CAAY,EAE3C,MACE,yBAAC,UAAO,IAAK,EAAc,MAAO,GAAe,CAAM,CAEb,CAAC,CAG7C,EACA,wBAAC,OAAI,UAAU,4BACd,EAAiB,CAAa,EAC/B,wBAAC,OAAI,UAAU,0BACb,wBAAC,qBAAa,CACd,CACF,CACF,CACJ,CAEJ,CT/CA,WAAmB,CACjB,QACA,UACA,qBAUC,CAED,MAAI,GAAM,OAAS,SAEf,wBAAC,IAAY,aAAc,EAAQ,EAAM,MAAO,eAAgB,EAAO,EAKzE,EAAM,OAAS,QACf,EAAM,OAAS,YACf,EAAM,OAAS,YACf,EAAM,OAAS,QAGb,wBAAC,OACC,UAAU,gBACV,gBAAe,EAAM,QACrB,gBAAe,EAAM,SAErB,wBAAC,IACC,kBAAmB,EACnB,eAAgB,EAChB,aAAc,EAAQ,EAAM,MAC9B,CACF,EAIA,EAAM,OAAS,QAEf,wBAAC,OACC,UAAU,gBACV,gBAAe,EAAM,QACrB,gBAAe,EAAM,SAErB,wBAAC,IAAM,eAAgB,EAAO,aAAc,EAAQ,EAAM,MAAO,CACnE,EAIA,EAAM,OAAS,SAEf,wBAAC,OACC,UAAU,gBACV,gBAAe,EAAM,QACrB,gBAAe,EAAM,SAErB,wBAAC,IACC,kBAAmB,EACnB,eAAgB,EAChB,aAAc,EAAQ,EAAM,MAC9B,CACF,EAIA,EAAM,OAAS,iBAEf,wBAAC,OACC,UAAU,gBACV,gBAAe,EAAM,QACrB,gBAAe,EAAM,SAErB,wBAAC,IAAc,eAAgB,EAAO,QAAS,EAAS,CAC1D,EAIA,EAAM,OAAS,kBAEf,wBAAC,OAAI,UAAU,iBACb,wBAAC,IACC,kBAAmB,EACnB,eAAgB,EAChB,aAAc,EAAQ,EAAM,MAC9B,CACF,EAIA,EAAM,OAAS,iBAEf,wBAAC,IACC,kBAAmB,EACnB,eAAgB,EAChB,QAAS,EACX,EAGG,IACT,CD9GA,MAA8C,0BAEvC,YAA8B,CACnC,UACA,gBACA,SACA,aAAa,SACb,iBAAiB,GACjB,qBAaC,CAGD,MACE,yBAAC,OAAI,UAAU,mBACb,wBAAC,IACC,yBAA0B,iBAAmB,KAC7C,eAAgB,EAChB,OAAQ,GAEP,kBAAe,aACd,wBAAC,OAAI,UAAU,uBAAuB,EAAc,UAAW,EAEjE,wBAAC,OAAc,EACd,EAAc,OAAO,IAAI,AAAC,GAEvB,wBAAC,GACC,kBAAmB,EACnB,MAAO,EACP,QAAS,EACT,IAAK,EAAM,KACb,CAEH,EACA,EAAQ,yBAA2B,EAAQ,YAAc,MACxD,gDACE,wBAAC,OAAI,UAAU,oDACZ,EAAQ,uBACX,EACA,wBAAC,QAAK,UAAU,YAAY,CAC9B,EACE,KACJ,wBAAC,OAAI,UAAU,4CACX,GAAQ,YAAc,aACtB,EAAQ,YAAc,WACtB,wBAAC,IACC,SAAS,OACT,UAAU,yBACV,KAAK,cACL,KAAK,SACL,MAAM,QAEL,EAAQ,eACT,wBAAC,QAAK,UAAU,sBACd,wBAAC,kBAAe,cAAY,OAAO,CACrC,CACF,EAED,EAAQ,YAAc,OACrB,wBAAC,IACC,SAAS,SACT,UAAU,yBACV,KAAK,cACL,KAAK,SACL,MAAM,UAEL,EACD,wBAAC,QAAK,UAAU,sBACd,wBAAC,kBAAe,cAAY,OAAO,CACrC,CACF,CAEJ,CACF,EACE,GAAQ,YAAc,UAAY,EAAQ,YAAc,QAC1D,EAAQ,YAAc,EACpB,wBAAC,IAAY,yBAA0B,iBAAmB,MACxD,wBAAC,IACC,SAAS,OACT,UAAU,sBACV,KAAK,cACL,KAAK,SACL,MAAM,QAEN,wBAAC,QAAK,UAAU,qBACd,wBAAC,iBAAc,cAAY,OAAO,CACpC,EACC,EAAQ,cACX,CACF,EACE,IACN,CAEJ,CAEA,YAAqB,CACnB,WACA,SACA,iBAAiB,GACjB,4BAMC,CACD,MAAK,GAOD,EAEA,wBAAC,GAAyB,eAAc,GAAC,OAAQ,EAAQ,OAAO,QAC9D,wBAAC,OAAI,UAAU,mBAAmB,CAAS,CAC7C,EAIF,wBAAC,GAAyB,OAAQ,EAAQ,OAAO,QAC/C,wBAAC,OAAI,UAAU,mBAAmB,CAAS,CAC7C,EAfE,wBAAC,QAAK,UAAU,kBAAkB,OAAO,OAAO,OAAQ,GACrD,CACH,CAeN,CAEA,aAAyB,CACvB,MACE,iDACE,wBAAC,SACC,UAAU,kBACV,KAAK,OACL,KAAK,aACL,GAAG,aACL,EACA,wBAAC,SAAM,UAAU,kBAAkB,QAAQ,cAAa,YAExD,CACF,CAEJ,CAEA,YAAoB,CAClB,WACA,OACA,YACA,QACA,OAAO,SACP,YAQC,CACD,MACE,yBAAC,UACC,YAAW,EACX,UAAW,iBAAiB,EAAY,IAAM,EAAY,KAC1D,KAAM,EACN,KAAM,EACN,MAAO,GAEN,CACH,CAEJ,CWzLO,GAAM,GAAqB,CAChC,YAAa,yDACb,MAAO,yEACP,WAAY,qDACZ,SAAU,+DACZ,EAEM,EAA2B,CAC/B,QAAS,SACT,QAAS,MACT,OAAQ,MACR,cAAe,OACf,YAAa,wBACf,EAEa,GAAa,CACxB,MAAO,CACL,eAAgB,EAAmB,YACnC,eAAgB,oCAChB,SAAU,CAAC,IAAI,EAAmB,cAAc,EAChD,SAAU,CAAC,6CAA6C,CAC1D,EACA,MAAO,CACL,eAAgB,EAAmB,MACnC,eAAgB,sBAChB,SAAU,CAAC,IAAI,EAAmB,QAAQ,EAC1C,SAAU,CAAC,sCAAsC,CACnD,EACA,WAAY,CACV,eAAgB,EAAmB,WACnC,eAAgB,oBAChB,SAAU,CAAC,IAAI,EAAmB,aAAa,EAC/C,SAAU,CAAC,kCAAkC,CAC/C,EACA,SAAU,CACR,eAAgB,EAAmB,SACnC,eAAgB,2CAChB,SAAU,CAAC,IAAI,EAAmB,WAAW,EAC7C,SAAU,CAAC,uDAAuD,CACpE,EACA,UAAW,CACT,eAAgB,IAAI,EAAyB,UAAU,EAAyB,SAAS,EAAyB,UAAU,EAAyB,gBACrJ,eAAgB,2CAChB,SAAU,CACR,KAAK,EAAyB,UAAU,EAAyB,SAAS,EAAyB,UAAU,EAAyB,mBACxI,EACA,SAAU,CAAC,sDAAsD,CACnE,EACA,YAAa,CACX,eAAgB,IAAI,EAAyB,YAC7C,eAAgB,eAChB,SAAU,CACR,KAAK,EAAyB,UAAU,EAAyB,cACnE,EACA,SAAU,CAAC,sBAAsB,CACnC,EAEA,iBAAkB,CAChB,eAAgB,IAAI,EAAyB,UAAU,EAAyB,WAChF,eAAgB,0BAChB,SAAU,CACR,KAAK,EAAyB,UAAU,EAAyB,cACnE,EACA,SAAU,CAAC,iCAAiC,CAC9C,EAEA,YAAa,CACX,eAAgB,IAAI,EAAyB,UAAU,EAAyB,kBAChF,eAAgB,eAChB,SAAU,CACR,KAAK,EAAyB,UAAU,EAAyB,qBACnE,EACA,SAAU,CAAC,sBAAsB,CACnC,EAEA,iBAAkB,CAChB,eAAgB,IAAI,EAAyB,UAAU,EAAyB,gBAAgB,EAAyB,WACzH,eAAgB,0BAChB,SAAU,CACR,KAAK,EAAyB,UAAU,EAAyB,gBAAgB,EAAyB,cAC5G,EACA,SAAU,CAAC,iCAAiC,CAC9C,CACF,EA8BO,YAAyB,CAC9B,MACA,MACA,iBACA,oBACsB,CACtB,GAAI,GAAuC,CACzC,eAAgB,GAChB,eAAgB,GAChB,SAAU,CAAC,EACX,SAAU,CAAC,CACb,EAKA,MAHA,IAAc,GAAM,GACpB,GAAc,GAAM,KAEhB,EACK,CACL,eAAgB,EAAiB,QACjC,eAAgB,EAAiB,QACjC,SAAU,CAAC,EAAiB,OAAO,EACnC,SAAU,CAAC,EAAiB,OAAO,CACrC,EAYF,GAAmB,OAAO,OAAO,CAAC,EAAG,GAAW,EAAe,EAG7D,KAAmB,aACnB,IAAmB,eACnB,IAAmB,oBACnB,IAAmB,eACnB,IAAmB,qBAEnB,GAAiB,eAAiB,EAAiB,eAAe,QAChE,KACA,KAAK,KAAO,IACd,EAMK,AAJuB,EAAiB,SAAS,KACpD,AAAC,GAAY,IAAY,MAAM,MACjC,GAGE,GAAiB,SAAW,CAC1B,GAAG,EAAiB,SACpB,MAAM,OACN,QAAQ,KACV,EACA,EAAiB,SAAW,CAC1B,GAAG,EAAiB,SACpB,oBAAoB,eACpB,wBAAwB,cAC1B,IAGG,EACT",
  "names": []
}
